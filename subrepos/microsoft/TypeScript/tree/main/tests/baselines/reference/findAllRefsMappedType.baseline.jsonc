// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsMappedType.ts ===
// interface T { /*FIND ALL REFS*/<|[|{| isDefinition: true |}a|]: number;|> }
// type U = { readonly [K in keyof T]?: string };
// declare const t: T;
// t.[|a|];
// declare const u: U;
// u.[|a|];

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsMappedType.ts ===
  // interface T { /*FIND ALL REFS*/<|[|a|]: number;|> }
  // type U = { readonly [K in keyof T]?: string };
  // declare const t: T;
  // t.a;
  // declare const u: U;
  // u.a;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) T.a: number",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "T",
      "kind": "interfaceName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "a",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsMappedType.ts ===
// interface T { <|[|a|]: number;|> }
// type U = { readonly [K in keyof T]?: string };
// declare const t: T;
// t./*FIND ALL REFS*/[|a|];
// declare const u: U;
// u.[|a|];

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsMappedType.ts ===
  // interface T { <|[|a|]: number;|> }
  // type U = { readonly [K in keyof T]?: string };
  // declare const t: T;
  // t./*FIND ALL REFS*/a;
  // declare const u: U;
  // u.a;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) T.a: number",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "T",
      "kind": "interfaceName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "a",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsMappedType.ts ===
// interface T { <|[|a|]: number;|> }
// type U = { readonly [K in keyof T]?: string };
// declare const t: T;
// t.[|a|];
// declare const u: U;
// u./*FIND ALL REFS*/[|a|];

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsMappedType.ts ===
  // interface T { <|[|a|]: number;|> }
  // type U = { readonly [K in keyof T]?: string };
  // declare const t: T;
  // t.a;
  // declare const u: U;
  // u./*FIND ALL REFS*/a;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) T.a: number",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "T",
      "kind": "interfaceName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "a",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     }
    ]
   }
  ]