//// [tests/cases/compiler/assertionFunctionWildcardImport1.ts] ////

=== src/core/_namespaces/ts.ts ===
import * as Debug from "../debug";
>Debug : Symbol(Debug, Decl(ts.ts, 0, 6))

export { Debug };
>Debug : Symbol(Debug, Decl(ts.ts, 1, 8))

=== src/core/debug.ts ===
export declare function assert(expression: unknown): asserts expression;
>assert : Symbol(assert, Decl(debug.ts, 0, 0))
>expression : Symbol(expression, Decl(debug.ts, 0, 31))
>expression : Symbol(expression, Decl(debug.ts, 0, 31))


=== src/core/foo.ts ===
import * as ts from "./_namespaces/ts";
>ts : Symbol(ts, Decl(foo.ts, 0, 6))

import { Debug } from "./_namespaces/ts";
>Debug : Symbol(Debug, Decl(foo.ts, 1, 8))

ts.Debug.assert(true);
>ts.Debug.assert : Symbol(ts.Debug.assert, Decl(debug.ts, 0, 0))
>ts.Debug : Symbol(ts.Debug, Decl(ts.ts, 1, 8))
>ts : Symbol(ts, Decl(foo.ts, 0, 6))
>Debug : Symbol(ts.Debug, Decl(ts.ts, 1, 8))
>assert : Symbol(ts.Debug.assert, Decl(debug.ts, 0, 0))

Debug.assert(true);
>Debug.assert : Symbol(ts.Debug.assert, Decl(debug.ts, 0, 0))
>Debug : Symbol(Debug, Decl(foo.ts, 1, 8))
>assert : Symbol(ts.Debug.assert, Decl(debug.ts, 0, 0))


=== src/other/_namespaces/ts.ts ===

export * from "../../core/_namespaces/ts"


=== src/other/bar.ts ===
import * as ts from "./_namespaces/ts";
>ts : Symbol(ts, Decl(bar.ts, 0, 6))

import { Debug } from "./_namespaces/ts";
>Debug : Symbol(Debug, Decl(bar.ts, 1, 8))

ts.Debug.assert(true);
>ts.Debug.assert : Symbol(Debug.assert, Decl(debug.ts, 0, 0))
>ts.Debug : Symbol(ts.Debug, Decl(ts.ts, 1, 8))
>ts : Symbol(ts, Decl(bar.ts, 0, 6))
>Debug : Symbol(ts.Debug, Decl(ts.ts, 1, 8))
>assert : Symbol(Debug.assert, Decl(debug.ts, 0, 0))

Debug.assert(true);
>Debug.assert : Symbol(Debug.assert, Decl(debug.ts, 0, 0))
>Debug : Symbol(Debug, Decl(bar.ts, 1, 8))
>assert : Symbol(Debug.assert, Decl(debug.ts, 0, 0))

