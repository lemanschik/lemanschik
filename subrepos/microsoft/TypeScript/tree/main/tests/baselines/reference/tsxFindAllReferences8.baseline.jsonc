// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 13) skipped ---
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// /*FIND ALL REFS*/<|declare function [|{| isWriteAccess: true, isDefinition: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true, isDefinition: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true, isDefinition: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|MainButton|] />|>;
// let opt = <|<[|MainButton|] children="chidlren" />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|MainButton|] goTo="goTo" />|>;
// let opt = <|<[|MainButton|] wrong />|>;

  // === Definitions ===
  // === /tests/cases/fourslash/file.tsx ===
  // --- (line: 13) skipped ---
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // /*FIND ALL REFS*/<|declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;|>
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // --- (line: 21) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "function",
    "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
    "displayParts": [
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "MainButton",
      "kind": "functionName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "buttonProps",
      "kind": "parameterName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "ButtonProps",
      "kind": "interfaceName"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "JSX",
      "kind": "moduleName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "Element",
      "kind": "text"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "+",
      "kind": "operator"
     },
     {
      "text": "2",
      "kind": "numericLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "overloads",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 13) skipped ---
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function /*FIND ALL REFS*/[|{| isWriteAccess: true, isDefinition: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true, isDefinition: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true, isDefinition: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|MainButton|] />|>;
// let opt = <|<[|MainButton|] children="chidlren" />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|MainButton|] goTo="goTo" />|>;
// let opt = <|<[|MainButton|] wrong />|>;

  // === Definitions ===
  // === /tests/cases/fourslash/file.tsx ===
  // --- (line: 13) skipped ---
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // <|declare function /*FIND ALL REFS*/[|MainButton|](buttonProps: ButtonProps): JSX.Element;|>
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // --- (line: 21) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "function",
    "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
    "displayParts": [
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "MainButton",
      "kind": "functionName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "buttonProps",
      "kind": "parameterName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "ButtonProps",
      "kind": "interfaceName"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "JSX",
      "kind": "moduleName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "Element",
      "kind": "text"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "+",
      "kind": "operator"
     },
     {
      "text": "2",
      "kind": "numericLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "overloads",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 13) skipped ---
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| isWriteAccess: true, isDefinition: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// /*FIND ALL REFS*/<|declare function [|{| isWriteAccess: true, isDefinition: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true, isDefinition: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|MainButton|] />|>;
// let opt = <|<[|MainButton|] children="chidlren" />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|MainButton|] goTo="goTo" />|>;
// let opt = <|<[|MainButton|] wrong />|>;

  // === Definitions ===
  // === /tests/cases/fourslash/file.tsx ===
  // --- (line: 13) skipped ---
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // <|declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;|>
  // /*FIND ALL REFS*/declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // --- (line: 22) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "function",
    "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
    "displayParts": [
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "MainButton",
      "kind": "functionName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "buttonProps",
      "kind": "parameterName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "ButtonProps",
      "kind": "interfaceName"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "JSX",
      "kind": "moduleName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "Element",
      "kind": "text"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "+",
      "kind": "operator"
     },
     {
      "text": "2",
      "kind": "numericLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "overloads",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 13) skipped ---
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| isWriteAccess: true, isDefinition: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function /*FIND ALL REFS*/[|{| isWriteAccess: true, isDefinition: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true, isDefinition: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|MainButton|] />|>;
// let opt = <|<[|MainButton|] children="chidlren" />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|MainButton|] goTo="goTo" />|>;
// let opt = <|<[|MainButton|] wrong />|>;

  // === Definitions ===
  // === /tests/cases/fourslash/file.tsx ===
  // --- (line: 13) skipped ---
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // <|declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;|>
  // declare function /*FIND ALL REFS*/MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // --- (line: 22) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "function",
    "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
    "displayParts": [
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "MainButton",
      "kind": "functionName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "buttonProps",
      "kind": "parameterName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "ButtonProps",
      "kind": "interfaceName"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "JSX",
      "kind": "moduleName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "Element",
      "kind": "text"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "+",
      "kind": "operator"
     },
     {
      "text": "2",
      "kind": "numericLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "overloads",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 13) skipped ---
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| isWriteAccess: true, isDefinition: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true, isDefinition: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// /*FIND ALL REFS*/<|declare function [|{| isWriteAccess: true, isDefinition: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|MainButton|] />|>;
// let opt = <|<[|MainButton|] children="chidlren" />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|MainButton|] goTo="goTo" />|>;
// let opt = <|<[|MainButton|] wrong />|>;

  // === Definitions ===
  // === /tests/cases/fourslash/file.tsx ===
  // --- (line: 13) skipped ---
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // <|declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;|>
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // /*FIND ALL REFS*/declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // --- (line: 23) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "function",
    "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
    "displayParts": [
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "MainButton",
      "kind": "functionName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "buttonProps",
      "kind": "parameterName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "ButtonProps",
      "kind": "interfaceName"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "JSX",
      "kind": "moduleName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "Element",
      "kind": "text"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "+",
      "kind": "operator"
     },
     {
      "text": "2",
      "kind": "numericLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "overloads",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 13) skipped ---
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| isWriteAccess: true, isDefinition: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true, isDefinition: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function /*FIND ALL REFS*/[|{| isWriteAccess: true, isDefinition: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|MainButton|] />|>;
// let opt = <|<[|MainButton|] children="chidlren" />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|MainButton|] goTo="goTo" />|>;
// let opt = <|<[|MainButton|] wrong />|>;

  // === Definitions ===
  // === /tests/cases/fourslash/file.tsx ===
  // --- (line: 13) skipped ---
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // <|declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;|>
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function /*FIND ALL REFS*/MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // --- (line: 23) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "function",
    "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
    "displayParts": [
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "MainButton",
      "kind": "functionName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "buttonProps",
      "kind": "parameterName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "ButtonProps",
      "kind": "interfaceName"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "JSX",
      "kind": "moduleName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "Element",
      "kind": "text"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "+",
      "kind": "operator"
     },
     {
      "text": "2",
      "kind": "numericLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "overloads",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 16) skipped ---
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = /*FIND ALL REFS*/<MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;



// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 13) skipped ---
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| isWriteAccess: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|</*FIND ALL REFS*/[|MainButton|] />|>;
// let opt = <|<[|MainButton|] children="chidlren" />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|MainButton|] goTo="goTo" />|>;
// let opt = <|<[|MainButton|] wrong />|>;

  // === Definitions ===
  // === /tests/cases/fourslash/file.tsx ===
  // --- (line: 13) skipped ---
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // <|declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;|>
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = </*FIND ALL REFS*/MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "function",
    "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
    "displayParts": [
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "MainButton",
      "kind": "functionName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "buttonProps",
      "kind": "parameterName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "ButtonProps",
      "kind": "interfaceName"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "JSX",
      "kind": "moduleName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "Element",
      "kind": "text"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "+",
      "kind": "operator"
     },
     {
      "text": "2",
      "kind": "numericLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "overloads",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 17) skipped ---
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = /*FIND ALL REFS*/<MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;



// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 13) skipped ---
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| isWriteAccess: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|MainButton|] />|>;
// let opt = <|</*FIND ALL REFS*/[|MainButton|] children="chidlren" />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|MainButton|] goTo="goTo" />|>;
// let opt = <|<[|MainButton|] wrong />|>;

  // === Definitions ===
  // === /tests/cases/fourslash/file.tsx ===
  // --- (line: 13) skipped ---
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // <|declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;|>
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = </*FIND ALL REFS*/MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "function",
    "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
    "displayParts": [
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "MainButton",
      "kind": "functionName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "buttonProps",
      "kind": "parameterName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "ButtonProps",
      "kind": "interfaceName"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "JSX",
      "kind": "moduleName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "Element",
      "kind": "text"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "+",
      "kind": "operator"
     },
     {
      "text": "2",
      "kind": "numericLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "overloads",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 18) skipped ---
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = /*FIND ALL REFS*/<MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;



// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 13) skipped ---
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| isWriteAccess: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|MainButton|] />|>;
// let opt = <|<[|MainButton|] children="chidlren" />|>;
// let opt = <|</*FIND ALL REFS*/[|MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|MainButton|] goTo="goTo" />|>;
// let opt = <|<[|MainButton|] wrong />|>;

  // === Definitions ===
  // === /tests/cases/fourslash/file.tsx ===
  // --- (line: 13) skipped ---
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // <|declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;|>
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = </*FIND ALL REFS*/MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "function",
    "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
    "displayParts": [
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "MainButton",
      "kind": "functionName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "buttonProps",
      "kind": "parameterName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "ButtonProps",
      "kind": "interfaceName"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "JSX",
      "kind": "moduleName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "Element",
      "kind": "text"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "+",
      "kind": "operator"
     },
     {
      "text": "2",
      "kind": "numericLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "overloads",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 19) skipped ---
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = /*FIND ALL REFS*/<MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;



// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 13) skipped ---
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| isWriteAccess: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|MainButton|] />|>;
// let opt = <|<[|MainButton|] children="chidlren" />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} />|>;
// let opt = <|</*FIND ALL REFS*/[|MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|MainButton|] goTo="goTo" />|>;
// let opt = <|<[|MainButton|] wrong />|>;

  // === Definitions ===
  // === /tests/cases/fourslash/file.tsx ===
  // --- (line: 13) skipped ---
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // <|declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;|>
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = </*FIND ALL REFS*/MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "function",
    "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
    "displayParts": [
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "MainButton",
      "kind": "functionName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "buttonProps",
      "kind": "parameterName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "ButtonProps",
      "kind": "interfaceName"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "JSX",
      "kind": "moduleName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "Element",
      "kind": "text"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "+",
      "kind": "operator"
     },
     {
      "text": "2",
      "kind": "numericLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "overloads",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 20) skipped ---
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = /*FIND ALL REFS*/<MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;



// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 13) skipped ---
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| isWriteAccess: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|MainButton|] />|>;
// let opt = <|<[|MainButton|] children="chidlren" />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|</*FIND ALL REFS*/[|MainButton|] goTo="goTo" />|>;
// let opt = <|<[|MainButton|] wrong />|>;

  // === Definitions ===
  // === /tests/cases/fourslash/file.tsx ===
  // --- (line: 13) skipped ---
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // <|declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;|>
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = </*FIND ALL REFS*/MainButton goTo="goTo" />;
  // let opt = <MainButton wrong />;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "function",
    "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
    "displayParts": [
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "MainButton",
      "kind": "functionName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "buttonProps",
      "kind": "parameterName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "ButtonProps",
      "kind": "interfaceName"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "JSX",
      "kind": "moduleName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "Element",
      "kind": "text"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "+",
      "kind": "operator"
     },
     {
      "text": "2",
      "kind": "numericLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "overloads",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 21) skipped ---
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = /*FIND ALL REFS*/<MainButton wrong />;



// === findAllReferences ===
// === /tests/cases/fourslash/file.tsx ===
// --- (line: 13) skipped ---
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| isWriteAccess: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| isWriteAccess: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|MainButton|] />|>;
// let opt = <|<[|MainButton|] children="chidlren" />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|MainButton|] goTo="goTo" />|>;
// let opt = <|</*FIND ALL REFS*/[|MainButton|] wrong />|>;

  // === Definitions ===
  // === /tests/cases/fourslash/file.tsx ===
  // --- (line: 13) skipped ---
  // interface LinkProps extends ClickableProps {
  //     goTo: string;
  // }
  // <|declare function [|MainButton|](buttonProps: ButtonProps): JSX.Element;|>
  // declare function MainButton(linkProps: LinkProps): JSX.Element;
  // declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
  // let opt = <MainButton />;
  // let opt = <MainButton children="chidlren" />;
  // let opt = <MainButton onClick={()=>{}} />;
  // let opt = <MainButton onClick={()=>{}} ignore-prop />;
  // let opt = <MainButton goTo="goTo" />;
  // let opt = </*FIND ALL REFS*/MainButton wrong />;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "function",
    "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
    "displayParts": [
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "MainButton",
      "kind": "functionName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "buttonProps",
      "kind": "parameterName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "ButtonProps",
      "kind": "interfaceName"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "JSX",
      "kind": "moduleName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "Element",
      "kind": "text"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "+",
      "kind": "operator"
     },
     {
      "text": "2",
      "kind": "numericLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "overloads",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     }
    ]
   }
  ]