//// [tests/cases/conformance/externalModules/typeOnly/exportNamespace5.ts] ////

=== /a.ts ===
export class A {}
>A : Symbol(A, Decl(a.ts, 0, 0))

export class B {}
>B : Symbol(B, Decl(a.ts, 0, 17))

export class X {}
>X : Symbol(X, Decl(a.ts, 1, 17))

=== /b.ts ===
export type * from "./a";
export { X } from "./a";
>X : Symbol(X, Decl(b.ts, 1, 8))

=== /c.ts ===
import { A, B as C, X } from "./b";
>A : Symbol(A, Decl(c.ts, 0, 8))
>B : Symbol(C, Decl(a.ts, 0, 17))
>C : Symbol(C, Decl(c.ts, 0, 11))
>X : Symbol(X, Decl(c.ts, 0, 19))

let _: A = new A();   // Error
>_ : Symbol(_, Decl(c.ts, 1, 3))
>A : Symbol(A, Decl(c.ts, 0, 8))
>A : Symbol(A, Decl(c.ts, 0, 8))

let __: C = new C();  // Error
>__ : Symbol(__, Decl(c.ts, 2, 3))
>C : Symbol(C, Decl(c.ts, 0, 11))
>C : Symbol(C, Decl(c.ts, 0, 11))

let ___: X = new X(); // Ok
>___ : Symbol(___, Decl(c.ts, 3, 3))
>X : Symbol(X, Decl(c.ts, 0, 19))
>X : Symbol(X, Decl(c.ts, 0, 19))

=== /d.ts ===

export type * from "./a";
export * from "./a";

=== /e.ts ===
import { A, B, X } from "./d";
>A : Symbol(A, Decl(e.ts, 0, 8))
>B : Symbol(B, Decl(e.ts, 0, 11))
>X : Symbol(X, Decl(e.ts, 0, 14))

let _: A = new A();   // Ok
>_ : Symbol(_, Decl(e.ts, 1, 3))
>A : Symbol(A, Decl(e.ts, 0, 8))
>A : Symbol(A, Decl(e.ts, 0, 8))

let __: B = new B();  // Ok
>__ : Symbol(__, Decl(e.ts, 2, 3))
>B : Symbol(B, Decl(e.ts, 0, 11))
>B : Symbol(B, Decl(e.ts, 0, 11))

let ___: X = new X(); // Ok
>___ : Symbol(___, Decl(e.ts, 3, 3))
>X : Symbol(X, Decl(e.ts, 0, 14))
>X : Symbol(X, Decl(e.ts, 0, 14))

