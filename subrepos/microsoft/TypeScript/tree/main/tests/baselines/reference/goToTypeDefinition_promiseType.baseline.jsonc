// === goToType ===
// === /tests/cases/fourslash/goToTypeDefinition_promiseType.ts ===
// type User = [|{| defId: 0 |}{ name: string }|];
// async function /*GOTO TYPE*/getUser() { return { name: "Bob" } satisfies User as User }
// 
// const promisedBob = getUser() 
// 
// export {}

// === lib.d.ts ===
// --- (line: --) skipped ---
// /**
//  * Represents the completion of an asynchronous operation
//  */
// <|interface [|{| defId: 1 |}Promise|]<T> {
//     /**
//      * Attaches callbacks for the resolution and/or rejection of the Promise.
//      * @param onfulfilled The callback to execute when the Promise is resolved.
//      * @param onrejected The callback to execute when the Promise is rejected.
//      * @returns A Promise for the completion of which ever callback is executed.
//      */
//     then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
// 
//     /**
//      * Attaches a callback for only the rejection of the Promise.
//      * @param onrejected The callback to execute when the Promise is rejected.
//      * @returns A Promise for the completion of the callback.
//      */
//     catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
// }|>
// 
// /**
//  * Recursively unwraps the "awaited type" of a type. Non-promise "thenables" should resolve to `never`. This emulates the behavior of `await`.
// --- (line: --) skipped ---

  // === Details ===
  [
   {
    "defId": 0,
    "kind": "",
    "name": "__type",
    "containerName": "",
    "isLocal": true,
    "isAmbient": false,
    "unverified": false,
    "failedAliasResolution": false
   },
   {
    "defId": 1,
    "kind": "interface",
    "name": "Promise",
    "containerName": "",
    "isLocal": false,
    "isAmbient": true,
    "unverified": false,
    "failedAliasResolution": false
   }
  ]



// === goToType ===
// === /tests/cases/fourslash/goToTypeDefinition_promiseType.ts ===
// type User = [|{| defId: 0 |}{ name: string }|];
// async function getUser() { return { name: "Bob" } satisfies User as User }
// 
// const /*GOTO TYPE*/promisedBob = getUser() 
// 
// export {}

// === lib.d.ts ===
// --- (line: --) skipped ---
// /**
//  * Represents the completion of an asynchronous operation
//  */
// <|interface [|{| defId: 1 |}Promise|]<T> {
//     /**
//      * Attaches callbacks for the resolution and/or rejection of the Promise.
//      * @param onfulfilled The callback to execute when the Promise is resolved.
//      * @param onrejected The callback to execute when the Promise is rejected.
//      * @returns A Promise for the completion of which ever callback is executed.
//      */
//     then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
// 
//     /**
//      * Attaches a callback for only the rejection of the Promise.
//      * @param onrejected The callback to execute when the Promise is rejected.
//      * @returns A Promise for the completion of the callback.
//      */
//     catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
// }|>
// 
// /**
//  * Recursively unwraps the "awaited type" of a type. Non-promise "thenables" should resolve to `never`. This emulates the behavior of `await`.
// --- (line: --) skipped ---

  // === Details ===
  [
   {
    "defId": 0,
    "kind": "",
    "name": "__type",
    "containerName": "",
    "isLocal": true,
    "isAmbient": false,
    "unverified": false,
    "failedAliasResolution": false
   },
   {
    "defId": 1,
    "kind": "interface",
    "name": "Promise",
    "containerName": "",
    "isLocal": false,
    "isAmbient": true,
    "unverified": false,
    "failedAliasResolution": false
   }
  ]