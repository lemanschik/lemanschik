//// [tests/cases/conformance/emitter/es5/asyncGenerators/emitter.asyncGenerators.objectLiteralMethods.es5.ts] ////

=== O1.ts ===
const o1 = {
>o1 : Symbol(o1, Decl(O1.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(O1.ts, 0, 12))
    }
}
=== O2.ts ===
const o2 = {
>o2 : Symbol(o2, Decl(O2.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(O2.ts, 0, 12))

        const x = yield;
>x : Symbol(x, Decl(O2.ts, 2, 13))
    }
}
=== O3.ts ===
const o3 = {
>o3 : Symbol(o3, Decl(O3.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(O3.ts, 0, 12))

        const x = yield 1;
>x : Symbol(x, Decl(O3.ts, 2, 13))
    }
}
=== O4.ts ===
const o4 = {
>o4 : Symbol(o4, Decl(O4.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(O4.ts, 0, 12))

        const x = yield* [1];
>x : Symbol(x, Decl(O4.ts, 2, 13))
    }
}
=== O5.ts ===
const o5 = {
>o5 : Symbol(o5, Decl(O5.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(O5.ts, 0, 12))

        const x = yield* (async function*() { yield 1; })();
>x : Symbol(x, Decl(O5.ts, 2, 13))
    }
}
=== O6.ts ===
const o6 = {
>o6 : Symbol(o6, Decl(O6.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(O6.ts, 0, 12))

        const x = await 1;
>x : Symbol(x, Decl(O6.ts, 2, 13))
    }
}
=== O7.ts ===
const o7 = {
>o7 : Symbol(o7, Decl(O7.ts, 0, 5))

    async * f() {
>f : Symbol(f, Decl(O7.ts, 0, 12))

        return 1;
    }
}

