//// [tests/cases/compiler/decoratorMetadataTypeOnlyExport.ts] ////

=== ./a.ts ===
class Foo {}
>Foo : Symbol(Foo, Decl(a.ts, 0, 0))

export type { Foo };
>Foo : Symbol(Foo, Decl(a.ts, 1, 13))

=== ./b.ts ===
import { Foo } from "./a";
>Foo : Symbol(Foo, Decl(b.ts, 0, 8))

const Decorator: ClassDecorator = () => undefined;
>Decorator : Symbol(Decorator, Decl(b.ts, 2, 5))
>ClassDecorator : Symbol(ClassDecorator, Decl(lib.decorators.legacy.d.ts, --, --))
>undefined : Symbol(undefined)

@Decorator
>Decorator : Symbol(Decorator, Decl(b.ts, 2, 5))

class Bar {
>Bar : Symbol(Bar, Decl(b.ts, 2, 50))

    constructor(par: Foo) {}
>par : Symbol(par, Decl(b.ts, 6, 16))
>Foo : Symbol(Foo, Decl(b.ts, 0, 8))
}

