//// [tests/cases/compiler/templateLiteralIntersection2.ts] ////

=== templateLiteralIntersection2.ts ===
type Path = string & { _pathBrand: any };
>Path : string & { _pathBrand: any; }
>_pathBrand : any

type JoinedPath = `${Path}/${Path}`;
>JoinedPath : `${Path}/${Path}`

declare function joinedPath(p: JoinedPath): void;
>joinedPath : (p: JoinedPath) => void
>p : `${Path}/${Path}`

joinedPath("foo/bar");
>joinedPath("foo/bar") : void
>joinedPath : (p: `${Path}/${Path}`) => void
>"foo/bar" : "foo/bar"

declare const somePath: Path;
>somePath : Path

joinedPath(`${somePath}/${somePath}`);
>joinedPath(`${somePath}/${somePath}`) : void
>joinedPath : (p: `${Path}/${Path}`) => void
>`${somePath}/${somePath}` : `${Path}/${Path}`
>somePath : Path
>somePath : Path


type StartsWithA = `a${string}`;
>StartsWithA : `a${string}`

type EndsWithA = `${string}a`;
>EndsWithA : `${string}a`


declare function withinAs(p: StartsWithA & EndsWithA): void;
>withinAs : (p: StartsWithA & EndsWithA) => void
>p : `a${string}` & `${string}a`

withinAs("");
>withinAs("") : void
>withinAs : (p: `a${string}` & `${string}a`) => void
>"" : ""

withinAs("a");
>withinAs("a") : void
>withinAs : (p: `a${string}` & `${string}a`) => void
>"a" : "a"

withinAs("ab");
>withinAs("ab") : void
>withinAs : (p: `a${string}` & `${string}a`) => void
>"ab" : "ab"

withinAs("aba");
>withinAs("aba") : void
>withinAs : (p: `a${string}` & `${string}a`) => void
>"aba" : "aba"

withinAs("abavvvva");
>withinAs("abavvvva") : void
>withinAs : (p: `a${string}` & `${string}a`) => void
>"abavvvva" : "abavvvva"

