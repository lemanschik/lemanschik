asyncGeneratorGetAccessorIsError.ts(2,17): error TS1005: '(' expected.
asyncGeneratorPropertyIsError.ts(2,14): error TS1005: '(' expected.
asyncGeneratorSetAccessorIsError.ts(2,17): error TS1005: '(' expected.
awaitInParameterInitializerIsError.ts(2,19): error TS2524: 'await' expressions cannot be used in a parameter initializer.
awaitMissingValueIsError.ts(3,14): error TS1109: Expression expected.
awaitParameterIsError.ts(2,15): error TS1359: Identifier expected. 'await' is a reserved word that cannot be used here.
nestedFunctionDeclarationNamedAwaitIsError.ts(3,18): error TS1359: Identifier expected. 'await' is a reserved word that cannot be used here.
nestedFunctionDeclarationNamedYieldIsError.ts(3,18): error TS1359: Identifier expected. 'yield' is a reserved word that cannot be used here.
nestedFunctionExpressionNamedAwaitIsError.ts(3,28): error TS1359: Identifier expected. 'await' is a reserved word that cannot be used here.
nestedFunctionExpressionNamedYieldIsError.ts(3,28): error TS1359: Identifier expected. 'yield' is a reserved word that cannot be used here.
yieldInParameterInitializerIsError.ts(2,19): error TS2523: 'yield' expressions cannot be used in a parameter initializer.
yieldParameterIsError.ts(2,15): error TS1359: Identifier expected. 'yield' is a reserved word that cannot be used here.
yieldStarMissingValueIsError.ts(3,16): error TS1109: Expression expected.


==== methodIsOk.ts (0 errors) ====
    const o1 = {
        async * f() {
        }
    };
==== awaitMethodNameIsOk.ts (0 errors) ====
    const o2 = {
        async * await() {
        }
    };
==== yieldMethodNameIsOk.ts (0 errors) ====
    const o3 = {
        async * yield() {
        }
    };
==== awaitParameterIsError.ts (1 errors) ====
    const o4 = {
        async * f(await) {
                  ~~~~~
!!! error TS1359: Identifier expected. 'await' is a reserved word that cannot be used here.
        }
    };
==== yieldParameterIsError.ts (1 errors) ====
    const o5 = {
        async * f(yield) {
                  ~~~~~
!!! error TS1359: Identifier expected. 'yield' is a reserved word that cannot be used here.
        }
    };
==== awaitInParameterInitializerIsError.ts (1 errors) ====
    const o6 = {
        async * f(a = await 1) {
                      ~~~~~~~
!!! error TS2524: 'await' expressions cannot be used in a parameter initializer.
        }
    };
==== yieldInParameterInitializerIsError.ts (1 errors) ====
    const o7 = {
        async * f(a = yield) {
                      ~~~~~
!!! error TS2523: 'yield' expressions cannot be used in a parameter initializer.
        }
    };
==== nestedAsyncGeneratorIsOk.ts (0 errors) ====
    const o8 = {
        async * f() {
            async function * g() {
            }
        }
    };
==== nestedFunctionDeclarationNamedYieldIsError.ts (1 errors) ====
    const o9 = {
        async * f() {
            function yield() {
                     ~~~~~
!!! error TS1359: Identifier expected. 'yield' is a reserved word that cannot be used here.
            }
        }
    };
==== nestedFunctionExpressionNamedYieldIsError.ts (1 errors) ====
    const o10 = {
        async * f() {
            const x = function yield() {
                               ~~~~~
!!! error TS1359: Identifier expected. 'yield' is a reserved word that cannot be used here.
            };
        }
    };
==== nestedFunctionDeclarationNamedAwaitIsError.ts (1 errors) ====
    const o11 = {
        async * f() {
            function await() {
                     ~~~~~
!!! error TS1359: Identifier expected. 'await' is a reserved word that cannot be used here.
            }
        }
    };
==== nestedFunctionExpressionNamedAwaitIsError.ts (1 errors) ====
    const o12 = {
        async * f() {
            const x = function await() {
                               ~~~~~
!!! error TS1359: Identifier expected. 'await' is a reserved word that cannot be used here.
            };
        }
    };
==== yieldIsOk.ts (0 errors) ====
    const o13 = {
        async * f() {
            yield;
        }
    };
==== yieldWithValueIsOk.ts (0 errors) ====
    const o14 = {
        async * f() {
            yield 1;
        }
    };
==== yieldStarMissingValueIsError.ts (1 errors) ====
    const o15 = {
        async * f() {
            yield *;
                   ~
!!! error TS1109: Expression expected.
        }
    };
==== yieldStarWithValueIsOk.ts (0 errors) ====
    const o16 = {
        async * f() {
            yield * [];
        }
    };
==== awaitWithValueIsOk.ts (0 errors) ====
    const o17 = {
        async * f() {
            await 1;
        }
    };
==== awaitMissingValueIsError.ts (1 errors) ====
    const o18 = {
        async * f() {
            await;
                 ~
!!! error TS1109: Expression expected.
        }
    };
==== awaitAsTypeIsOk.ts (0 errors) ====
    interface await {}
    const o19 = {
        async * f() {
            let x: await;
        }
    };
==== yieldAsTypeIsOk.ts (0 errors) ====
    interface yield {}
    const o20 = {
        async * f() {
            let x: yield;
        }
    };
==== yieldInNestedComputedPropertyIsOk.ts (0 errors) ====
    const o21 = {
        async * f() {
            const x = { [yield]: 1 };
        }
    };
==== asyncGeneratorGetAccessorIsError.ts (1 errors) ====
    const o22 = {
        async * get x() {
                    ~
!!! error TS1005: '(' expected.
            return 1;
        }
    };
==== asyncGeneratorSetAccessorIsError.ts (1 errors) ====
    const o23 = {
        async * set x(value: number) {
                    ~
!!! error TS1005: '(' expected.
        }
    };
==== asyncGeneratorPropertyIsError.ts (1 errors) ====
    const o24 = {
        async * x: 1;
                 ~
!!! error TS1005: '(' expected.
    };
    