// === findAllReferences ===
// === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
// interface IFoo { /*FIND ALL REFS*/<|[|{| isDefinition: true |}xy|]: number;|> }
// 
// // Assignment
// var a1: IFoo = { <|[|{| isWriteAccess: true |}xy|]: 0|> };
// var a2: IFoo = { <|[|{| isWriteAccess: true |}xy|]: 0|> };
// 
// // Function call
// function consumer(f: IFoo) { }
// consumer({ <|[|{| isWriteAccess: true |}xy|]: 1|> });
// 
// // Type cast
// var c = <IFoo>{ <|[|{| isWriteAccess: true |}xy|]: 0|> };
// 
// // Array literal
// var ar: IFoo[] = [{ <|[|{| isWriteAccess: true |}xy|]: 1|> }, { <|[|{| isWriteAccess: true |}xy|]: 2|> }];
// 
// // Nested object literal
// var ob: { ifoo: IFoo } = { ifoo: { <|[|{| isWriteAccess: true |}xy|]: 0|> } };
// 
// // Widened type
// var w: IFoo = { <|[|{| isWriteAccess: true |}xy|]: undefined|> };
// 
// // Untped -- should not be included
// var u = { xy: 0 };

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForContextuallyTypedObjectLiteralProperties.ts ===
  // interface IFoo { /*FIND ALL REFS*/<|[|xy|]: number;|> }
  // 
  // // Assignment
  // var a1: IFoo = { xy: 0 };
  // --- (line: 5) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) IFoo.xy: number",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "IFoo",
      "kind": "interfaceName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "xy",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     }
    ]
   }
  ]