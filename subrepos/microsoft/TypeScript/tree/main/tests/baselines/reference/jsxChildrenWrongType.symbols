//// [tests/cases/compiler/jsxChildrenWrongType.tsx] ////

=== other.tsx ===
/// <reference path="react18/react18.d.ts" />
/// <reference path="react18/global.d.ts" />


interface PropsType {
>PropsType : Symbol(PropsType, Decl(other.tsx, 0, 0))

    children: [string, number?] | Iterable<boolean>;
>children : Symbol(PropsType.children, Decl(other.tsx, 4, 21))
>Iterable : Symbol(Iterable, Decl(lib.es2015.iterable.d.ts, --, --))
}
declare class Foo extends React.Component<PropsType, {}> {}
>Foo : Symbol(Foo, Decl(other.tsx, 6, 1))
>React.Component : Symbol(React.Component, Decl(react18.d.ts, 427, 50), Decl(react18.d.ts, 430, 90))
>React : Symbol(React, Decl(react18.d.ts, 62, 15))
>Component : Symbol(React.Component, Decl(react18.d.ts, 427, 50), Decl(react18.d.ts, 430, 90))
>PropsType : Symbol(PropsType, Decl(other.tsx, 0, 0))

const b = (
>b : Symbol(b, Decl(other.tsx, 8, 5))

    <Foo>
>Foo : Symbol(Foo, Decl(other.tsx, 6, 1))

        {<div/> as unknown}
>div : Symbol(JSX.IntrinsicElements.div, Decl(react18.d.ts, 3174, 110))

        {"aa"}
    </Foo>
>Foo : Symbol(Foo, Decl(other.tsx, 6, 1))

);
