//// [tests/cases/compiler/simpleRecursionWithBaseCase.ts] ////

=== simpleRecursionWithBaseCase.ts ===
function fn1(n: number) {
>fn1 : Symbol(fn1, Decl(simpleRecursionWithBaseCase.ts, 0, 0))
>n : Symbol(n, Decl(simpleRecursionWithBaseCase.ts, 0, 13))

    if (n === 0) {
>n : Symbol(n, Decl(simpleRecursionWithBaseCase.ts, 0, 13))

        return 3;
    } else {
        return fn1(n - 1);
>fn1 : Symbol(fn1, Decl(simpleRecursionWithBaseCase.ts, 0, 0))
>n : Symbol(n, Decl(simpleRecursionWithBaseCase.ts, 0, 13))
    }
}
const num: number = fn1();
>num : Symbol(num, Decl(simpleRecursionWithBaseCase.ts, 7, 5))
>fn1 : Symbol(fn1, Decl(simpleRecursionWithBaseCase.ts, 0, 0))

function fn2(n: number) {
>fn2 : Symbol(fn2, Decl(simpleRecursionWithBaseCase.ts, 7, 26))
>n : Symbol(n, Decl(simpleRecursionWithBaseCase.ts, 9, 13))

    return fn2(n);
>fn2 : Symbol(fn2, Decl(simpleRecursionWithBaseCase.ts, 7, 26))
>n : Symbol(n, Decl(simpleRecursionWithBaseCase.ts, 9, 13))
}
const nev: never = fn2();
>nev : Symbol(nev, Decl(simpleRecursionWithBaseCase.ts, 12, 5))
>fn2 : Symbol(fn2, Decl(simpleRecursionWithBaseCase.ts, 7, 26))

function fn3(n: number) {
>fn3 : Symbol(fn3, Decl(simpleRecursionWithBaseCase.ts, 12, 25))
>n : Symbol(n, Decl(simpleRecursionWithBaseCase.ts, 14, 13))

    if (n === 0) {
>n : Symbol(n, Decl(simpleRecursionWithBaseCase.ts, 14, 13))

        return 3;
    } else {
        return fn1("hello world");
>fn1 : Symbol(fn1, Decl(simpleRecursionWithBaseCase.ts, 0, 0))
    }
}

function fn4(n: number) {
>fn4 : Symbol(fn4, Decl(simpleRecursionWithBaseCase.ts, 20, 1))
>n : Symbol(n, Decl(simpleRecursionWithBaseCase.ts, 22, 13))

    if (n === 0) {
>n : Symbol(n, Decl(simpleRecursionWithBaseCase.ts, 22, 13))

        return 3;
    } else {
        return notfoundsymbol("hello world");
    }
}

function fn5() {
>fn5 : Symbol(fn5, Decl(simpleRecursionWithBaseCase.ts, 28, 1))

    return [fn5][0]();
>fn5 : Symbol(fn5, Decl(simpleRecursionWithBaseCase.ts, 28, 1))
}

