// === findAllReferences ===
// === /tests/cases/fourslash/referencesForMergedDeclarations2.ts ===
// --- (line: 3) skipped ---
// 
// function ATest() { }
// 
// /*FIND ALL REFS*/<|import [|{| isWriteAccess: true, isDefinition: true |}alias|] = ATest;|> // definition
// 
// var a: [|alias|].Bar; // namespace
// [|alias|].call(this); // value

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForMergedDeclarations2.ts ===
  // --- (line: 3) skipped ---
  // 
  // function ATest() { }
  // 
  // /*FIND ALL REFS*/<|import [|alias|] = ATest;|> // definition
  // 
  // var a: alias.Bar; // namespace
  // alias.call(this); // value

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "(alias) function alias(): void\n(alias) namespace alias\nimport alias = ATest",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "alias",
      "kind": "aliasName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "void",
      "kind": "keyword"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "alias",
      "kind": "aliasName"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "alias",
      "kind": "aliasName"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "=",
      "kind": "operator"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "ATest",
      "kind": "functionName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForMergedDeclarations2.ts ===
// --- (line: 3) skipped ---
// 
// function ATest() { }
// 
// <|import /*FIND ALL REFS*/[|{| isWriteAccess: true, isDefinition: true |}alias|] = ATest;|> // definition
// 
// var a: [|alias|].Bar; // namespace
// [|alias|].call(this); // value

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForMergedDeclarations2.ts ===
  // --- (line: 3) skipped ---
  // 
  // function ATest() { }
  // 
  // <|import /*FIND ALL REFS*/[|alias|] = ATest;|> // definition
  // 
  // var a: alias.Bar; // namespace
  // alias.call(this); // value

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "(alias) function alias(): void\n(alias) namespace alias\nimport alias = ATest",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "alias",
      "kind": "aliasName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "void",
      "kind": "keyword"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "alias",
      "kind": "aliasName"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "alias",
      "kind": "aliasName"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "=",
      "kind": "operator"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "ATest",
      "kind": "functionName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForMergedDeclarations2.ts ===
// --- (line: 3) skipped ---
// 
// function ATest() { }
// 
// <|import [|{| isWriteAccess: true |}alias|] = ATest;|> // definition
// 
// var a: /*FIND ALL REFS*/[|alias|].Bar; // namespace
// [|alias|].call(this); // value

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForMergedDeclarations2.ts ===
  // --- (line: 3) skipped ---
  // 
  // function ATest() { }
  // 
  // <|import [|alias|] = ATest;|> // definition
  // 
  // var a: /*FIND ALL REFS*/alias.Bar; // namespace
  // alias.call(this); // value

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "(alias) function alias(): void\n(alias) namespace alias\nimport alias = ATest",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "alias",
      "kind": "aliasName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "void",
      "kind": "keyword"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "alias",
      "kind": "aliasName"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "alias",
      "kind": "aliasName"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "=",
      "kind": "operator"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "ATest",
      "kind": "functionName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForMergedDeclarations2.ts ===
// --- (line: 3) skipped ---
// 
// function ATest() { }
// 
// <|import [|{| isWriteAccess: true |}alias|] = ATest;|> // definition
// 
// var a: [|alias|].Bar; // namespace
// /*FIND ALL REFS*/[|alias|].call(this); // value

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForMergedDeclarations2.ts ===
  // --- (line: 3) skipped ---
  // 
  // function ATest() { }
  // 
  // <|import [|alias|] = ATest;|> // definition
  // 
  // var a: alias.Bar; // namespace
  // /*FIND ALL REFS*/alias.call(this); // value

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "(alias) function alias(): void\n(alias) namespace alias\nimport alias = ATest",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "alias",
      "kind": "aliasName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "void",
      "kind": "keyword"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "alias",
      "kind": "aliasName"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "alias",
      "kind": "aliasName"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "=",
      "kind": "operator"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "ATest",
      "kind": "functionName"
     }
    ]
   }
  ]