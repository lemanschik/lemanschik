// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
// type T =
//     | { /*FIND ALL REFS*/<|[|{| defId: 0, isDefinition: true |}type|]: "a",|> prop: number }
//     | { <|[|{| defId: 1 |}type|]: "b",|> prop: string };
// const tt: T = {
//     <|[|{| defId: 0, isWriteAccess: true |}type|]: "a"|>,
//     prop: 0,
// };
// declare const t: T;
// if (t.[|{| defId: 2 |}type|] === "a") {
//     t.[|{| defId: 0 |}type|];
// } else {
//     t.[|{| defId: 1 |}type|];
// }

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
  // type T =
  //     | { /*FIND ALL REFS*/<|[|{| defId: 0 |}<|[|{| defId: 2 |}type|]|]: "a",|>|> prop: number }
  //     | { <|[|{| defId: 1 |}type|]: "b",|> prop: string };
  // const tt: T = {
  //     type: "a",
  //     prop: 0,
  // --- (line: 7) skipped ---

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) type: \"a\"",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "type",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"a\"",
      "kind": "stringLiteral"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) type: \"b\"",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "type",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"b\"",
      "kind": "stringLiteral"
     }
    ]
   },
   {
    "defId": 2,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) type: \"a\" | \"b\"",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "type",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"a\"",
      "kind": "stringLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "|",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"b\"",
      "kind": "stringLiteral"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
// type T =
//     | { <|[|{| defId: 0 |}type|]: "a",|> prop: number }
//     | { /*FIND ALL REFS*/<|[|{| defId: 1, isDefinition: true |}type|]: "b",|> prop: string };
// const tt: T = {
//     <|[|{| defId: 0, isWriteAccess: true |}type|]: "a"|>,
//     prop: 0,
// };
// declare const t: T;
// if (t.[|{| defId: 2 |}type|] === "a") {
//     t.[|{| defId: 0 |}type|];
// } else {
//     t.[|{| defId: 1 |}type|];
// }

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
  // type T =
  //     | { <|[|{| defId: 0 |}<|[|{| defId: 2 |}type|]|]: "a",|>|> prop: number }
  //     | { /*FIND ALL REFS*/<|[|{| defId: 1 |}type|]: "b",|> prop: string };
  // const tt: T = {
  //     type: "a",
  //     prop: 0,
  // --- (line: 7) skipped ---

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) type: \"a\"",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "type",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"a\"",
      "kind": "stringLiteral"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) type: \"b\"",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "type",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"b\"",
      "kind": "stringLiteral"
     }
    ]
   },
   {
    "defId": 2,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) type: \"a\" | \"b\"",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "type",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"a\"",
      "kind": "stringLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "|",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"b\"",
      "kind": "stringLiteral"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
// type T =
//     | { <|[|{| defId: 0 |}type|]: "a",|> prop: number }
//     | { <|[|{| defId: 1 |}type|]: "b",|> prop: string };
// const tt: T = {
//     <|[|{| defId: 0, isWriteAccess: true |}type|]: "a"|>,
//     prop: 0,
// };
// declare const t: T;
// if (t./*FIND ALL REFS*/[|{| defId: 2 |}type|] === "a") {
//     t.[|{| defId: 0 |}type|];
// } else {
//     t.[|{| defId: 1 |}type|];
// }

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
  // type T =
  //     | { <|[|{| defId: 0 |}<|[|{| defId: 2 |}type|]|]: "a",|>|> prop: number }
  //     | { <|[|{| defId: 1 |}type|]: "b",|> prop: string };
  // const tt: T = {
  //     type: "a",
  //     prop: 0,
  // };
  // declare const t: T;
  // if (t./*FIND ALL REFS*/type === "a") {
  //     t.type;
  // } else {
  //     t.type;
  // }

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) type: \"a\"",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "type",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"a\"",
      "kind": "stringLiteral"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) type: \"b\"",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "type",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"b\"",
      "kind": "stringLiteral"
     }
    ]
   },
   {
    "defId": 2,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) type: \"a\" | \"b\"",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "type",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"a\"",
      "kind": "stringLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "|",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"b\"",
      "kind": "stringLiteral"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
// type T =
//     | { <|[|{| defId: 0 |}type|]: "a",|> prop: number }
//     | { <|[|{| defId: 1 |}type|]: "b",|> prop: string };
// const tt: T = {
//     <|[|{| defId: 0, isWriteAccess: true |}type|]: "a"|>,
//     prop: 0,
// };
// declare const t: T;
// if (t.[|{| defId: 2 |}type|] === "a") {
//     t./*FIND ALL REFS*/[|{| defId: 0 |}type|];
// } else {
//     t.[|{| defId: 1 |}type|];
// }

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
  // type T =
  //     | { <|[|{| defId: 0 |}<|[|{| defId: 2 |}type|]|]: "a",|>|> prop: number }
  //     | { <|[|{| defId: 1 |}type|]: "b",|> prop: string };
  // const tt: T = {
  //     type: "a",
  //     prop: 0,
  // };
  // declare const t: T;
  // if (t.type === "a") {
  //     t./*FIND ALL REFS*/type;
  // } else {
  //     t.type;
  // }

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) type: \"a\"",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "type",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"a\"",
      "kind": "stringLiteral"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) type: \"b\"",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "type",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"b\"",
      "kind": "stringLiteral"
     }
    ]
   },
   {
    "defId": 2,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) type: \"a\" | \"b\"",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "type",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"a\"",
      "kind": "stringLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "|",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"b\"",
      "kind": "stringLiteral"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
// type T =
//     | { <|[|{| defId: 0 |}type|]: "a",|> prop: number }
//     | { <|[|{| defId: 1 |}type|]: "b",|> prop: string };
// const tt: T = {
//     <|[|{| defId: 0, isWriteAccess: true |}type|]: "a"|>,
//     prop: 0,
// };
// declare const t: T;
// if (t.[|{| defId: 2 |}type|] === "a") {
//     t.[|{| defId: 0 |}type|];
// } else {
//     t./*FIND ALL REFS*/[|{| defId: 1 |}type|];
// }

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
  // type T =
  //     | { <|[|{| defId: 0 |}<|[|{| defId: 2 |}type|]|]: "a",|>|> prop: number }
  //     | { <|[|{| defId: 1 |}type|]: "b",|> prop: string };
  // const tt: T = {
  //     type: "a",
  //     prop: 0,
  // };
  // declare const t: T;
  // if (t.type === "a") {
  //     t.type;
  // } else {
  //     t./*FIND ALL REFS*/type;
  // }

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) type: \"a\"",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "type",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"a\"",
      "kind": "stringLiteral"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) type: \"b\"",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "type",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"b\"",
      "kind": "stringLiteral"
     }
    ]
   },
   {
    "defId": 2,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) type: \"a\" | \"b\"",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "type",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"a\"",
      "kind": "stringLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "|",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"b\"",
      "kind": "stringLiteral"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
// type T =
//     | { <|[|{| defId: 0 |}type|]: "a",|> prop: number }
//     | { type: "b", prop: string };
// const tt: T = {
//     /*FIND ALL REFS*/<|[|{| defId: 0, isWriteAccess: true, isDefinition: true |}type|]: "a"|>,
//     prop: 0,
// };
// declare const t: T;
// if (t.[|{| defId: 1 |}type|] === "a") {
//     t.[|{| defId: 0 |}type|];
// } else {
//     t.type;
// }

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
  // type T =
  //     | { <|[|{| defId: 0 |}<|[|{| defId: 1 |}type|]|]: "a",|>|> prop: number }
  //     | { type: "b", prop: string };
  // const tt: T = {
  //     /*FIND ALL REFS*/type: "a",
  //     prop: 0,
  // };
  // declare const t: T;
  // --- (line: 9) skipped ---

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) type: \"a\"",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "type",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"a\"",
      "kind": "stringLiteral"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) type: \"a\" | \"b\"",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "type",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"a\"",
      "kind": "stringLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "|",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"b\"",
      "kind": "stringLiteral"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
// type T =
//     | { type: "a", /*FIND ALL REFS*/<|[|{| defId: 0, isDefinition: true |}prop|]: number|> }
//     | { type: "b", <|[|{| defId: 1 |}prop|]: string|> };
// const tt: T = {
//     type: "a",
//     <|[|{| defId: 0, isWriteAccess: true |}prop|]: 0|>,
// };
// declare const t: T;
// if (t.type === "a") {
// --- (line: 10) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
  // type T =
  //     | { type: "a", /*FIND ALL REFS*/<|[|{| defId: 0 |}prop|]: number|> }
  //     | { type: "b", <|[|{| defId: 1 |}prop|]: string|> };
  // const tt: T = {
  //     type: "a",
  //     prop: 0,
  // --- (line: 7) skipped ---

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) prop: number",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "prop",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) prop: string",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "prop",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "string",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
// type T =
//     | { type: "a", <|[|{| defId: 0 |}prop|]: number|> }
//     | { type: "b", /*FIND ALL REFS*/<|[|{| defId: 1, isDefinition: true |}prop|]: string|> };
// const tt: T = {
//     type: "a",
//     <|[|{| defId: 0, isWriteAccess: true |}prop|]: 0|>,
// };
// declare const t: T;
// if (t.type === "a") {
// --- (line: 10) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
  // type T =
  //     | { type: "a", <|[|{| defId: 0 |}prop|]: number|> }
  //     | { type: "b", /*FIND ALL REFS*/<|[|{| defId: 1 |}prop|]: string|> };
  // const tt: T = {
  //     type: "a",
  //     prop: 0,
  // --- (line: 7) skipped ---

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) prop: number",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "prop",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) prop: string",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "prop",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "string",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
// type T =
//     | { type: "a", <|[|prop|]: number|> }
//     | { type: "b", prop: string };
// const tt: T = {
//     type: "a",
//     /*FIND ALL REFS*/<|[|{| isWriteAccess: true, isDefinition: true |}prop|]: 0|>,
// };
// declare const t: T;
// if (t.type === "a") {
// --- (line: 10) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnionProperty.ts ===
  // type T =
  //     | { type: "a", <|[|prop|]: number|> }
  //     | { type: "b", prop: string };
  // const tt: T = {
  //     type: "a",
  //     /*FIND ALL REFS*/prop: 0,
  // };
  // declare const t: T;
  // if (t.type === "a") {
  // --- (line: 10) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) prop: number",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "prop",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     }
    ]
   }
  ]