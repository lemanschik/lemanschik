//// [tests/cases/conformance/types/typeRelationships/comparable/equalityWithtNullishCoalescingAssignment.ts] ////

=== equalityWithtNullishCoalescingAssignment.ts ===
function f1(a?: boolean): void {
>f1 : Symbol(f1, Decl(equalityWithtNullishCoalescingAssignment.ts, 0, 0))
>a : Symbol(a, Decl(equalityWithtNullishCoalescingAssignment.ts, 0, 12))

    a ??= true;
>a : Symbol(a, Decl(equalityWithtNullishCoalescingAssignment.ts, 0, 12))

    if (a === false) {
>a : Symbol(a, Decl(equalityWithtNullishCoalescingAssignment.ts, 0, 12))

        console.log(a);
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>a : Symbol(a, Decl(equalityWithtNullishCoalescingAssignment.ts, 0, 12))
    }
}
f1(false);
>f1 : Symbol(f1, Decl(equalityWithtNullishCoalescingAssignment.ts, 0, 0))

function f2() {
>f2 : Symbol(f2, Decl(equalityWithtNullishCoalescingAssignment.ts, 7, 10))

    let x: 0 | 1 | 2 | 3 = 0 as any;
>x : Symbol(x, Decl(equalityWithtNullishCoalescingAssignment.ts, 10, 7))

    x ??= 1;
>x : Symbol(x, Decl(equalityWithtNullishCoalescingAssignment.ts, 10, 7))

    if (x === 0) {
>x : Symbol(x, Decl(equalityWithtNullishCoalescingAssignment.ts, 10, 7))

        console.log(x);
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>x : Symbol(x, Decl(equalityWithtNullishCoalescingAssignment.ts, 10, 7))
    }
}

