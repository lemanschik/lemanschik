// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsRedeclaredPropertyInDerivedInterface.ts ===
// interface A {
//     <|readonly /*FIND ALL REFS*/[|{| defId: 0, isDefinition: true |}x|]: number | string;|>
// }
// interface B extends A {
//     <|readonly [|{| defId: 1 |}x|]: number;|>
// }
// const a: A = { <|[|{| defId: 0, isWriteAccess: true |}x|]: 0|> };
// const b: B = { <|[|{| defId: 1, isWriteAccess: true |}x|]: 0|> };

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsRedeclaredPropertyInDerivedInterface.ts ===
  // interface A {
  //     <|readonly /*FIND ALL REFS*/[|{| defId: 0 |}x|]: number | string;|>
  // }
  // interface B extends A {
  //     <|readonly [|{| defId: 1 |}x|]: number;|>
  // }
  // const a: A = { x: 0 };
  // const b: B = { x: 0 };

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) A.x: string | number",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "A",
      "kind": "interfaceName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "x",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "string",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "|",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) B.x: number",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "B",
      "kind": "interfaceName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "x",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsRedeclaredPropertyInDerivedInterface.ts ===
// interface A {
//     <|readonly [|{| defId: 0 |}x|]: number | string;|>
// }
// interface B extends A {
//     <|readonly /*FIND ALL REFS*/[|{| defId: 1, isDefinition: true |}x|]: number;|>
// }
// const a: A = { <|[|{| defId: 0, isWriteAccess: true |}x|]: 0|> };
// const b: B = { <|[|{| defId: 1, isWriteAccess: true |}x|]: 0|> };

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsRedeclaredPropertyInDerivedInterface.ts ===
  // interface A {
  //     <|readonly [|{| defId: 0 |}x|]: number | string;|>
  // }
  // interface B extends A {
  //     <|readonly /*FIND ALL REFS*/[|{| defId: 1 |}x|]: number;|>
  // }
  // const a: A = { x: 0 };
  // const b: B = { x: 0 };

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) A.x: string | number",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "A",
      "kind": "interfaceName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "x",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "string",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "|",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) B.x: number",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "B",
      "kind": "interfaceName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "x",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsRedeclaredPropertyInDerivedInterface.ts ===
// interface A {
//     <|readonly [|{| defId: 0 |}x|]: number | string;|>
// }
// interface B extends A {
//     <|readonly [|{| defId: 1 |}x|]: number;|>
// }
// const a: A = { /*FIND ALL REFS*/<|[|{| defId: 0, isWriteAccess: true, isDefinition: true |}x|]: 0|> };
// const b: B = { <|[|{| defId: 1, isWriteAccess: true |}x|]: 0|> };

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsRedeclaredPropertyInDerivedInterface.ts ===
  // interface A {
  //     <|readonly [|{| defId: 0 |}x|]: number | string;|>
  // }
  // interface B extends A {
  //     <|readonly [|{| defId: 1 |}x|]: number;|>
  // }
  // const a: A = { /*FIND ALL REFS*/x: 0 };
  // const b: B = { x: 0 };

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) A.x: string | number",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "A",
      "kind": "interfaceName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "x",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "string",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "|",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) B.x: number",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "B",
      "kind": "interfaceName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "x",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsRedeclaredPropertyInDerivedInterface.ts ===
// interface A {
//     <|readonly [|{| defId: 0 |}x|]: number | string;|>
// }
// interface B extends A {
//     <|readonly [|{| defId: 1 |}x|]: number;|>
// }
// const a: A = { <|[|{| defId: 0, isWriteAccess: true |}x|]: 0|> };
// const b: B = { /*FIND ALL REFS*/<|[|{| defId: 1, isWriteAccess: true, isDefinition: true |}x|]: 0|> };

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsRedeclaredPropertyInDerivedInterface.ts ===
  // interface A {
  //     <|readonly [|{| defId: 0 |}x|]: number | string;|>
  // }
  // interface B extends A {
  //     <|readonly [|{| defId: 1 |}x|]: number;|>
  // }
  // const a: A = { x: 0 };
  // const b: B = { /*FIND ALL REFS*/x: 0 };

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) A.x: string | number",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "A",
      "kind": "interfaceName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "x",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "string",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "|",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) B.x: number",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "B",
      "kind": "interfaceName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "x",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     }
    ]
   }
  ]