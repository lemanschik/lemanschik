// === findAllReferences ===
// === /tests/cases/fourslash/referencesForModifiers.ts ===
// /*FIND ALL REFS*/<|declare abstract class [|{| isWriteAccess: true, isDefinition: true |}C1|] {
//     static a;
//     readonly b;
//     public c;
//     protected d;
//     private e;
// }|>
// const enum E {
// }
// async function fn() {}
// export default class C2 {}

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForModifiers.ts ===
  // /*FIND ALL REFS*/<|declare abstract class [|C1|] {
  //     static a;
  //     readonly b;
  //     public c;
  //     protected d;
  //     private e;
  // }|>
  // const enum E {
  // }
  // async function fn() {}
  // export default class C2 {}

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "class",
    "name": "class C1",
    "displayParts": [
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "C1",
      "kind": "className"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForModifiers.ts ===
// <|declare /*FIND ALL REFS*/abstract class [|{| isWriteAccess: true, isDefinition: true |}C1|] {
//     static a;
//     readonly b;
//     public c;
//     protected d;
//     private e;
// }|>
// const enum E {
// }
// async function fn() {}
// export default class C2 {}

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForModifiers.ts ===
  // <|declare /*FIND ALL REFS*/abstract class [|C1|] {
  //     static a;
  //     readonly b;
  //     public c;
  //     protected d;
  //     private e;
  // }|>
  // const enum E {
  // }
  // async function fn() {}
  // export default class C2 {}

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "class",
    "name": "class C1",
    "displayParts": [
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "C1",
      "kind": "className"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForModifiers.ts ===
// declare abstract class C1 {
//     /*FIND ALL REFS*/<|static [|{| isWriteAccess: true, isDefinition: true |}a|];|>
//     readonly b;
//     public c;
//     protected d;
// --- (line: 6) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForModifiers.ts ===
  // declare abstract class C1 {
  //     /*FIND ALL REFS*/<|static [|a|];|>
  //     readonly b;
  //     public c;
  //     protected d;
  // --- (line: 6) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) C1.a: any",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "C1",
      "kind": "className"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "a",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "any",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForModifiers.ts ===
// declare abstract class C1 {
//     static a;
//     /*FIND ALL REFS*/<|readonly [|{| isWriteAccess: true, isDefinition: true |}b|];|>
//     public c;
//     protected d;
//     private e;
// --- (line: 7) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForModifiers.ts ===
  // declare abstract class C1 {
  //     static a;
  //     /*FIND ALL REFS*/<|readonly [|b|];|>
  //     public c;
  //     protected d;
  //     private e;
  // --- (line: 7) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) C1.b: any",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "C1",
      "kind": "className"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "b",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "any",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForModifiers.ts ===
// declare abstract class C1 {
//     static a;
//     readonly b;
//     /*FIND ALL REFS*/<|public [|{| isWriteAccess: true, isDefinition: true |}c|];|>
//     protected d;
//     private e;
// }
// --- (line: 8) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForModifiers.ts ===
  // declare abstract class C1 {
  //     static a;
  //     readonly b;
  //     /*FIND ALL REFS*/<|public [|c|];|>
  //     protected d;
  //     private e;
  // }
  // --- (line: 8) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) C1.c: any",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "C1",
      "kind": "className"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "c",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "any",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForModifiers.ts ===
// declare abstract class C1 {
//     static a;
//     readonly b;
//     public c;
//     /*FIND ALL REFS*/<|protected [|{| isWriteAccess: true, isDefinition: true |}d|];|>
//     private e;
// }
// const enum E {
// --- (line: 9) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForModifiers.ts ===
  // declare abstract class C1 {
  //     static a;
  //     readonly b;
  //     public c;
  //     /*FIND ALL REFS*/<|protected [|d|];|>
  //     private e;
  // }
  // const enum E {
  // --- (line: 9) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) C1.d: any",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "C1",
      "kind": "className"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "d",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "any",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForModifiers.ts ===
// declare abstract class C1 {
//     static a;
//     readonly b;
//     public c;
//     protected d;
//     /*FIND ALL REFS*/<|private [|{| isWriteAccess: true, isDefinition: true |}e|];|>
// }
// const enum E {
// }
// async function fn() {}
// export default class C2 {}

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForModifiers.ts ===
  // declare abstract class C1 {
  //     static a;
  //     readonly b;
  //     public c;
  //     protected d;
  //     /*FIND ALL REFS*/<|private [|e|];|>
  // }
  // const enum E {
  // }
  // async function fn() {}
  // export default class C2 {}

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) C1.e: any",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "C1",
      "kind": "className"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "e",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "any",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForModifiers.ts ===
// --- (line: 4) skipped ---
//     protected d;
//     private e;
// }
// /*FIND ALL REFS*/<|const enum [|{| isWriteAccess: true, isDefinition: true |}E|] {
// }|>
// async function fn() {}
// export default class C2 {}

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForModifiers.ts ===
  // --- (line: 4) skipped ---
  //     protected d;
  //     private e;
  // }
  // /*FIND ALL REFS*/<|const enum [|E|] {
  // }|>
  // async function fn() {}
  // export default class C2 {}

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "enum",
    "name": "const enum E",
    "displayParts": [
     {
      "text": "const",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "enum",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "E",
      "kind": "enumName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForModifiers.ts ===
// --- (line: 6) skipped ---
// }
// const enum E {
// }
// /*FIND ALL REFS*/<|async function [|{| isWriteAccess: true, isDefinition: true |}fn|]() {}|>
// export default class C2 {}

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForModifiers.ts ===
  // --- (line: 6) skipped ---
  // }
  // const enum E {
  // }
  // /*FIND ALL REFS*/<|async function [|fn|]() {}|>
  // export default class C2 {}

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "function",
    "name": "function fn(): Promise<void>",
    "displayParts": [
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "fn",
      "kind": "functionName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Promise",
      "kind": "interfaceName"
     },
     {
      "text": "<",
      "kind": "punctuation"
     },
     {
      "text": "void",
      "kind": "keyword"
     },
     {
      "text": ">",
      "kind": "punctuation"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForModifiers.ts ===
// --- (line: 7) skipped ---
// const enum E {
// }
// async function fn() {}
// /*FIND ALL REFS*/<|export default class [|{| isWriteAccess: true, isDefinition: true |}C2|] {}|>

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForModifiers.ts ===
  // --- (line: 7) skipped ---
  // const enum E {
  // }
  // async function fn() {}
  // /*FIND ALL REFS*/<|export default class [|C2|] {}|>

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "class",
    "name": "class C2",
    "displayParts": [
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "C2",
      "kind": "className"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForModifiers.ts ===
// --- (line: 7) skipped ---
// const enum E {
// }
// async function fn() {}
// <|export /*FIND ALL REFS*/[|{| isWriteAccess: true, isDefinition: true |}default|] class C2 {}|>

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForModifiers.ts ===
  // --- (line: 7) skipped ---
  // const enum E {
  // }
  // async function fn() {}
  // <|export /*FIND ALL REFS*/default class [|C2|] {}|>

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "class",
    "name": "class C2",
    "displayParts": [
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "C2",
      "kind": "className"
     }
    ]
   }
  ]