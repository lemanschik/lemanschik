//// [tests/cases/compiler/returnTypeTypeArguments.ts] ////

=== returnTypeTypeArguments.ts ===
class One<T>{
>One : One<T>

    value: T;
>value : T
}
class Two<T, U>{
>Two : Two<T, U>

    value: T;
>value : T

    id: U;
>id : U
}
class Three<T, U, V>{
>Three : Three<T, U, V>

    value: T;
>value : T

    id: U;
>id : U

    name: V;
>name : V
}

function A1(): One { return null; }
>A1 : () => any

function A2(): Two { return null; }
>A2 : () => any

function A3(): Three { return null; }
>A3 : () => any

function B1(): Two<number> { return null; }
>B1 : () => any

function B2(): Three<string> { return null; }
>B2 : () => any

function B3(): Three<string, number> { return null; }
>B3 : () => any

class C {
>C : C

    A1(): One { return null; }
>A1 : () => any

    A2(): Two { return null; }
>A2 : () => any

    A3(): Three { return null; }
>A3 : () => any

    B1(): Two<number> { return null; }
>B1 : () => any

    B2(): Three<string> { return null; }
>B2 : () => any

    B3(): Three<string, number> { return null; }
>B3 : () => any
}

class D<T> {
>D : D<T>

    A2(): Two<T> { return null; }
>A2 : () => any

    A3(): Three<T> { return null; }
>A3 : () => any

    B1(): Two<T> { return null; }
>B1 : () => any

    B2(): Three<T> { return null; }
>B2 : () => any

    B3(): Three<string, T> { return null; }
>B3 : () => any
}

interface I<T> {
    value: T;
>value : T
}

class Y<T>
>Y : Y<T>
{
    value: T;
>value : T
}

class X<T>
>X : X<T>
{
    p1: () => X;
>p1 : () => any

    p2: { [idx: number]: X }
>p2 : { [idx: number]: any; }
>idx : number

    p3: X[]
>p3 : any[]

    p4: I<X>
>p4 : I<any>

    p5: X
>p5 : any

    p6: () => Y;
>p6 : () => any

    p7: { [idx: number]: Y }
>p7 : { [idx: number]: any; }
>idx : number

    p8: Y[]
>p8 : any[]

    p9: I<Y>
>p9 : I<any>

    pa: Y
>pa : any
}

declare var a: {
>a : { p1: () => X; p2: { [idx: number]: any; }; p3: X[]; p4: I<X>; p5: any; p6: () => Y; p7: { [idx: number]: any; }; p8: Y[]; p9: I<Y>; pa: any; }

    p1: () => X;
>p1 : () => any

    p2: { [idx: number]: X }
>p2 : { [idx: number]: any; }
>idx : number

    p3: X[]
>p3 : any[]

    p4: I<X>
>p4 : I<any>

    p5: X
>p5 : any

    p6: () => Y;
>p6 : () => any

    p7: { [idx: number]: Y }
>p7 : { [idx: number]: any; }
>idx : number

    p8: Y[]
>p8 : any[]

    p9: I<Y>
>p9 : I<any>

    pa: Y
>pa : any

};

