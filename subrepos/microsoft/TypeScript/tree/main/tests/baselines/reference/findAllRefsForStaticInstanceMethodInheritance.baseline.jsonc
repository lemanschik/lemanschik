// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsForStaticInstanceMethodInheritance.ts ===
// class X{
// 	/*FIND ALL REFS*/<|[|{| defId: 0, isWriteAccess: true, isDefinition: true |}foo|](): void{}|>
// }
// 
// class Y extends X{
// 	static foo(): void{}
// }
// 
// class Z extends Y{
// 	static foo(): void{}
// 	<|[|{| defId: 1, isWriteAccess: true |}foo|](): void{}|>
// }
// 
// const x = new X();
// const y = new Y();
// const z = new Z();
// x.[|{| defId: 0 |}foo|]();
// y.[|{| defId: 0 |}foo|]();
// z.[|{| defId: 1 |}foo|]();
// Y.foo();
// Z.foo();

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsForStaticInstanceMethodInheritance.ts ===
  // class X{
  // 	/*FIND ALL REFS*/<|[|{| defId: 0 |}foo|](): void{}|>
  // }
  // 
  // class Y extends X{
  // 	static foo(): void{}
  // }
  // 
  // class Z extends Y{
  // 	static foo(): void{}
  // 	<|[|{| defId: 1 |}foo|](): void{}|>
  // }
  // 
  // const x = new X();
  // --- (line: 15) skipped ---

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "method",
    "name": "(method) X.foo(): void",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "method",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "X",
      "kind": "className"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "foo",
      "kind": "methodName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "void",
      "kind": "keyword"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "method",
    "name": "(method) Z.foo(): void",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "method",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Z",
      "kind": "className"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "foo",
      "kind": "methodName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "void",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsForStaticInstanceMethodInheritance.ts ===
// class X{
// 	foo(): void{}
// }
// 
// class Y extends X{
// 	<|static /*FIND ALL REFS*/[|{| isWriteAccess: true, isDefinition: true |}foo|](): void{}|>
// }
// 
// class Z extends Y{
// --- (line: 10) skipped ---

// --- (line: 16) skipped ---
// x.foo();
// y.foo();
// z.foo();
// Y.[|foo|]();
// Z.foo();

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsForStaticInstanceMethodInheritance.ts ===
  // class X{
  // 	foo(): void{}
  // }
  // 
  // class Y extends X{
  // 	<|static /*FIND ALL REFS*/[|foo|](): void{}|>
  // }
  // 
  // class Z extends Y{
  // --- (line: 10) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "method",
    "name": "(method) Y.foo(): void",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "method",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Y",
      "kind": "className"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "foo",
      "kind": "methodName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "void",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsForStaticInstanceMethodInheritance.ts ===
// --- (line: 6) skipped ---
// }
// 
// class Z extends Y{
// 	<|static /*FIND ALL REFS*/[|{| isWriteAccess: true, isDefinition: true |}foo|](): void{}|>
// 	foo(): void{}
// }
// 
// --- (line: 14) skipped ---

// --- (line: 17) skipped ---
// y.foo();
// z.foo();
// Y.foo();
// Z.[|foo|]();

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsForStaticInstanceMethodInheritance.ts ===
  // --- (line: 6) skipped ---
  // }
  // 
  // class Z extends Y{
  // 	<|static /*FIND ALL REFS*/[|foo|](): void{}|>
  // 	foo(): void{}
  // }
  // 
  // --- (line: 14) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "method",
    "name": "(method) Z.foo(): void",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "method",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Z",
      "kind": "className"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "foo",
      "kind": "methodName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "void",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsForStaticInstanceMethodInheritance.ts ===
// class X{
// 	<|[|{| defId: 0, isWriteAccess: true |}foo|](): void{}|>
// }
// 
// class Y extends X{
// 	static foo(): void{}
// }
// 
// class Z extends Y{
// 	static foo(): void{}
// 	/*FIND ALL REFS*/<|[|{| defId: 1, isWriteAccess: true, isDefinition: true |}foo|](): void{}|>
// }
// 
// const x = new X();
// const y = new Y();
// const z = new Z();
// x.[|{| defId: 0 |}foo|]();
// y.[|{| defId: 0 |}foo|]();
// z.[|{| defId: 1 |}foo|]();
// Y.foo();
// Z.foo();

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsForStaticInstanceMethodInheritance.ts ===
  // class X{
  // 	<|[|{| defId: 0 |}foo|](): void{}|>
  // }
  // 
  // class Y extends X{
  // 	static foo(): void{}
  // }
  // 
  // class Z extends Y{
  // 	static foo(): void{}
  // 	/*FIND ALL REFS*/<|[|{| defId: 1 |}foo|](): void{}|>
  // }
  // 
  // const x = new X();
  // --- (line: 15) skipped ---

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "method",
    "name": "(method) X.foo(): void",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "method",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "X",
      "kind": "className"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "foo",
      "kind": "methodName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "void",
      "kind": "keyword"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "method",
    "name": "(method) Z.foo(): void",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "method",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Z",
      "kind": "className"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "foo",
      "kind": "methodName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "void",
      "kind": "keyword"
     }
    ]
   }
  ]