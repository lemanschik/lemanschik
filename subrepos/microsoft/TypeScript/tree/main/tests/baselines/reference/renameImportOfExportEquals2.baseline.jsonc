// === findAllReferences ===
// === /tests/cases/fourslash/renameImportOfExportEquals2.ts ===
// <|declare namespace /*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true, isDefinition: true |}N|] {
//     export var x: number;
// }|>
// declare module "mod" {
//     <|export = [|{| defId: 0 |}N|];|>
// }
// declare module "a" {
//     <|import * as [|{| defId: 1, isWriteAccess: true |}O|] from "mod";|>
//     <|<|export { [|{| contextId: 3, defId: 1 |}O|] as [|{| contextId: 4, defId: 2, isWriteAccess: true |}P|] };|>|> // Renaming N here would rename
// }
// declare module "b" {
//     <|<|import { [|{| contextId: 5, defId: 2 |}P|] as [|{| contextId: 6, defId: 3, isWriteAccess: true |}Q|] } from "a";|>|>
//     export const y: typeof [|{| defId: 3 |}Q|].x;
// }

  // === Definitions ===
  // === /tests/cases/fourslash/renameImportOfExportEquals2.ts ===
  // <|declare namespace /*FIND ALL REFS*/[|{| defId: 0 |}N|] {
  //     export var x: number;
  // }|>
  // declare module "mod" {
  //     export = N;
  // }
  // declare module "a" {
  //     <|import * as [|{| defId: 1 |}O|] from "mod";|>
  //     <|export { O as [|{| defId: 2 |}P|] };|> // Renaming N here would rename
  // }
  // declare module "b" {
  //     <|import { P as [|{| defId: 3 |}Q|] } from "a";|>
  //     export const y: typeof Q.x;
  // }

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "module",
    "name": "namespace N",
    "displayParts": [
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "N",
      "kind": "moduleName"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "(alias) namespace O\nimport O",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "O",
      "kind": "aliasName"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "O",
      "kind": "aliasName"
     }
    ]
   },
   {
    "defId": 2,
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "(alias) namespace P\nexport P",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "P",
      "kind": "aliasName"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "export",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "P",
      "kind": "aliasName"
     }
    ]
   },
   {
    "defId": 3,
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "(alias) namespace Q\nimport Q",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Q",
      "kind": "aliasName"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Q",
      "kind": "aliasName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/renameImportOfExportEquals2.ts ===
// --- (line: 4) skipped ---
//     export = N;
// }
// declare module "a" {
//     <|import * as /*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true, isDefinition: true |}O|] from "mod";|>
//     <|<|export { [|{| contextId: 1, defId: 0 |}O|] as [|{| contextId: 2, defId: 1, isWriteAccess: true |}P|] };|>|> // Renaming N here would rename
// }
// declare module "b" {
//     <|<|import { [|{| contextId: 3, defId: 1 |}P|] as [|{| contextId: 4, defId: 2, isWriteAccess: true |}Q|] } from "a";|>|>
//     export const y: typeof [|{| defId: 2 |}Q|].x;
// }

  // === Definitions ===
  // === /tests/cases/fourslash/renameImportOfExportEquals2.ts ===
  // --- (line: 4) skipped ---
  //     export = N;
  // }
  // declare module "a" {
  //     <|import * as /*FIND ALL REFS*/[|{| defId: 0 |}O|] from "mod";|>
  //     <|export { O as [|{| defId: 1 |}P|] };|> // Renaming N here would rename
  // }
  // declare module "b" {
  //     <|import { P as [|{| defId: 2 |}Q|] } from "a";|>
  //     export const y: typeof Q.x;
  // }

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "(alias) namespace O\nimport O",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "O",
      "kind": "aliasName"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "O",
      "kind": "aliasName"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "(alias) namespace P\nexport P",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "P",
      "kind": "aliasName"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "export",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "P",
      "kind": "aliasName"
     }
    ]
   },
   {
    "defId": 2,
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "(alias) namespace Q\nimport Q",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Q",
      "kind": "aliasName"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Q",
      "kind": "aliasName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/renameImportOfExportEquals2.ts ===
// --- (line: 5) skipped ---
// }
// declare module "a" {
//     import * as O from "mod";
//     <|export { O as /*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true, isDefinition: true |}P|] };|> // Renaming N here would rename
// }
// declare module "b" {
//     <|<|import { [|{| contextId: 1, defId: 0 |}P|] as [|{| contextId: 2, defId: 1, isWriteAccess: true |}Q|] } from "a";|>|>
//     export const y: typeof [|{| defId: 1 |}Q|].x;
// }

  // === Definitions ===
  // === /tests/cases/fourslash/renameImportOfExportEquals2.ts ===
  // --- (line: 5) skipped ---
  // }
  // declare module "a" {
  //     import * as O from "mod";
  //     <|export { O as /*FIND ALL REFS*/[|{| defId: 0 |}P|] };|> // Renaming N here would rename
  // }
  // declare module "b" {
  //     <|import { P as [|{| defId: 1 |}Q|] } from "a";|>
  //     export const y: typeof Q.x;
  // }

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "(alias) namespace P\nexport P",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "P",
      "kind": "aliasName"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "export",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "P",
      "kind": "aliasName"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "(alias) namespace Q\nimport Q",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Q",
      "kind": "aliasName"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Q",
      "kind": "aliasName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/renameImportOfExportEquals2.ts ===
// --- (line: 8) skipped ---
//     export { O as P }; // Renaming N here would rename
// }
// declare module "b" {
//     <|import { P as /*FIND ALL REFS*/[|{| isWriteAccess: true, isDefinition: true |}Q|] } from "a";|>
//     export const y: typeof [|Q|].x;
// }

  // === Definitions ===
  // === /tests/cases/fourslash/renameImportOfExportEquals2.ts ===
  // --- (line: 8) skipped ---
  //     export { O as P }; // Renaming N here would rename
  // }
  // declare module "b" {
  //     <|import { P as /*FIND ALL REFS*/[|Q|] } from "a";|>
  //     export const y: typeof Q.x;
  // }

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "(alias) namespace Q\nimport Q",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Q",
      "kind": "aliasName"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Q",
      "kind": "aliasName"
     }
    ]
   }
  ]



// === findRenameLocations ===
// === /tests/cases/fourslash/renameImportOfExportEquals2.ts ===
// <|declare namespace /*RENAME*/[|NRENAME|] {
//     export var x: number;
// }|>
// declare module "mod" {
//     <|export = [|NRENAME|];|>
// }
// declare module "a" {
//     import * as O from "mod";
// --- (line: 9) skipped ---



// === findRenameLocations ===
// === /tests/cases/fourslash/renameImportOfExportEquals2.ts ===
// <|declare namespace [|NRENAME|] {
//     export var x: number;
// }|>
// declare module "mod" {
//     <|export = /*RENAME*/[|NRENAME|];|>
// }
// declare module "a" {
//     import * as O from "mod";
// --- (line: 9) skipped ---



// === findRenameLocations ===
// === /tests/cases/fourslash/renameImportOfExportEquals2.ts ===
// --- (line: 4) skipped ---
//     export = N;
// }
// declare module "a" {
//     <|import * as /*RENAME*/[|ORENAME|] from "mod";|>
//     <|export { [|ORENAME|] as P };|> // Renaming N here would rename
// }
// declare module "b" {
//     import { P as Q } from "a";
//     export const y: typeof Q.x;
// }



// === findRenameLocations ===
// === /tests/cases/fourslash/renameImportOfExportEquals2.ts ===
// --- (line: 4) skipped ---
//     export = N;
// }
// declare module "a" {
//     <|import * as [|ORENAME|] from "mod";|>
//     <|export { /*RENAME*/[|ORENAME|] as P };|> // Renaming N here would rename
// }
// declare module "b" {
//     import { P as Q } from "a";
//     export const y: typeof Q.x;
// }



// === findRenameLocations ===
// === /tests/cases/fourslash/renameImportOfExportEquals2.ts ===
// --- (line: 5) skipped ---
// }
// declare module "a" {
//     import * as O from "mod";
//     <|export { O as /*RENAME*/[|PRENAME|] };|> // Renaming N here would rename
// }
// declare module "b" {
//     <|import { [|PRENAME|] as Q } from "a";|>
//     export const y: typeof Q.x;
// }



// === findRenameLocations ===
// === /tests/cases/fourslash/renameImportOfExportEquals2.ts ===
// --- (line: 5) skipped ---
// }
// declare module "a" {
//     import * as O from "mod";
//     <|export { O as [|PRENAME|] };|> // Renaming N here would rename
// }
// declare module "b" {
//     <|import { /*RENAME*/[|PRENAME|] as Q } from "a";|>
//     export const y: typeof Q.x;
// }



// === findRenameLocations ===
// === /tests/cases/fourslash/renameImportOfExportEquals2.ts ===
// --- (line: 8) skipped ---
//     export { O as P }; // Renaming N here would rename
// }
// declare module "b" {
//     <|import { P as /*RENAME*/[|QRENAME|] } from "a";|>
//     export const y: typeof [|QRENAME|].x;
// }



// === findRenameLocations ===
// === /tests/cases/fourslash/renameImportOfExportEquals2.ts ===
// --- (line: 8) skipped ---
//     export { O as P }; // Renaming N here would rename
// }
// declare module "b" {
//     <|import { P as [|QRENAME|] } from "a";|>
//     export const y: typeof /*RENAME*/[|QRENAME|].x;
// }