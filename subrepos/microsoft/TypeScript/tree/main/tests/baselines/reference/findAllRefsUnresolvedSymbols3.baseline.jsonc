// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
// <|import * as /*FIND ALL REFS*/[|{| isWriteAccess: true, isDefinition: true |}Bar|] from "does-not-exist";|>
// 
// let a: [|Bar|];
// let b: [|Bar|]<string>;
// let c: [|Bar|]<string, number>;
// let d: [|Bar|].X;
// let e: [|Bar|].X<string>;
// let f: [|Bar|].X.Y;

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
  // <|import * as /*FIND ALL REFS*/[|Bar|] from "does-not-exist";|>
  // 
  // let a: Bar;
  // let b: Bar<string>;
  // --- (line: 5) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "import Bar",
    "displayParts": [
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Bar",
      "kind": "aliasName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
// <|import * as [|{| isWriteAccess: true |}Bar|] from "does-not-exist";|>
// 
// let a: /*FIND ALL REFS*/[|Bar|];
// let b: [|Bar|]<string>;
// let c: [|Bar|]<string, number>;
// let d: [|Bar|].X;
// let e: [|Bar|].X<string>;
// let f: [|Bar|].X.Y;

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
  // <|import * as [|Bar|] from "does-not-exist";|>
  // 
  // let a: /*FIND ALL REFS*/Bar;
  // let b: Bar<string>;
  // let c: Bar<string, number>;
  // let d: Bar.X;
  // let e: Bar.X<string>;
  // let f: Bar.X.Y;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "import Bar",
    "displayParts": [
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Bar",
      "kind": "aliasName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
// <|import * as [|{| isWriteAccess: true |}Bar|] from "does-not-exist";|>
// 
// let a: [|Bar|];
// let b: /*FIND ALL REFS*/[|Bar|]<string>;
// let c: [|Bar|]<string, number>;
// let d: [|Bar|].X;
// let e: [|Bar|].X<string>;
// let f: [|Bar|].X.Y;

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
  // <|import * as [|Bar|] from "does-not-exist";|>
  // 
  // let a: Bar;
  // let b: /*FIND ALL REFS*/Bar<string>;
  // let c: Bar<string, number>;
  // let d: Bar.X;
  // let e: Bar.X<string>;
  // let f: Bar.X.Y;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "import Bar",
    "displayParts": [
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Bar",
      "kind": "aliasName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
// <|import * as [|{| isWriteAccess: true |}Bar|] from "does-not-exist";|>
// 
// let a: [|Bar|];
// let b: [|Bar|]<string>;
// let c: /*FIND ALL REFS*/[|Bar|]<string, number>;
// let d: [|Bar|].X;
// let e: [|Bar|].X<string>;
// let f: [|Bar|].X.Y;

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
  // <|import * as [|Bar|] from "does-not-exist";|>
  // 
  // let a: Bar;
  // let b: Bar<string>;
  // let c: /*FIND ALL REFS*/Bar<string, number>;
  // let d: Bar.X;
  // let e: Bar.X<string>;
  // let f: Bar.X.Y;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "import Bar",
    "displayParts": [
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Bar",
      "kind": "aliasName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
// <|import * as [|{| isWriteAccess: true |}Bar|] from "does-not-exist";|>
// 
// let a: [|Bar|];
// let b: [|Bar|]<string>;
// let c: [|Bar|]<string, number>;
// let d: /*FIND ALL REFS*/[|Bar|].X;
// let e: [|Bar|].X<string>;
// let f: [|Bar|].X.Y;

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
  // <|import * as [|Bar|] from "does-not-exist";|>
  // 
  // let a: Bar;
  // let b: Bar<string>;
  // let c: Bar<string, number>;
  // let d: /*FIND ALL REFS*/Bar.X;
  // let e: Bar.X<string>;
  // let f: Bar.X.Y;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "import Bar",
    "displayParts": [
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Bar",
      "kind": "aliasName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
// <|import * as [|{| isWriteAccess: true |}Bar|] from "does-not-exist";|>
// 
// let a: [|Bar|];
// let b: [|Bar|]<string>;
// let c: [|Bar|]<string, number>;
// let d: [|Bar|].X;
// let e: /*FIND ALL REFS*/[|Bar|].X<string>;
// let f: [|Bar|].X.Y;

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
  // <|import * as [|Bar|] from "does-not-exist";|>
  // 
  // let a: Bar;
  // let b: Bar<string>;
  // let c: Bar<string, number>;
  // let d: Bar.X;
  // let e: /*FIND ALL REFS*/Bar.X<string>;
  // let f: Bar.X.Y;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "import Bar",
    "displayParts": [
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Bar",
      "kind": "aliasName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
// <|import * as [|{| isWriteAccess: true |}Bar|] from "does-not-exist";|>
// 
// let a: [|Bar|];
// let b: [|Bar|]<string>;
// let c: [|Bar|]<string, number>;
// let d: [|Bar|].X;
// let e: [|Bar|].X<string>;
// let f: /*FIND ALL REFS*/[|Bar|].X.Y;

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
  // <|import * as [|Bar|] from "does-not-exist";|>
  // 
  // let a: Bar;
  // let b: Bar<string>;
  // let c: Bar<string, number>;
  // let d: Bar.X;
  // let e: Bar.X<string>;
  // let f: /*FIND ALL REFS*/Bar.X.Y;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "import Bar",
    "displayParts": [
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Bar",
      "kind": "aliasName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
// import * as Bar from "does-not-exist";
// 
// let a: Bar;
// let b: Bar<string>;
// let c: Bar<string, number>;
// let d: Bar./*FIND ALL REFS*/[|X|];
// let e: Bar.[|X|]<string>;
// let f: Bar.X.Y;

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
  // import * as Bar from "does-not-exist";
  // 
  // let a: Bar;
  // let b: Bar<string>;
  // let c: Bar<string, number>;
  // let d: Bar./*FIND ALL REFS*/[|X|];
  // let e: Bar.X<string>;
  // let f: Bar.X.Y;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "type",
    "name": "type Bar.X = /*unresolved*/ any",
    "displayParts": [
     {
      "text": "type",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Bar",
      "kind": "aliasName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "X",
      "kind": "aliasName"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "=",
      "kind": "operator"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "/*unresolved*/",
      "kind": "text"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "any",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
// import * as Bar from "does-not-exist";
// 
// let a: Bar;
// let b: Bar<string>;
// let c: Bar<string, number>;
// let d: Bar.[|X|];
// let e: Bar./*FIND ALL REFS*/[|X|]<string>;
// let f: Bar.X.Y;

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
  // --- (line: 3) skipped ---
  // let b: Bar<string>;
  // let c: Bar<string, number>;
  // let d: Bar.X;
  // let e: Bar./*FIND ALL REFS*/[|X|]<string>;
  // let f: Bar.X.Y;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "type",
    "name": "type Bar.X = /*unresolved*/ any",
    "displayParts": [
     {
      "text": "type",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Bar",
      "kind": "aliasName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "X",
      "kind": "aliasName"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "=",
      "kind": "operator"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "/*unresolved*/",
      "kind": "text"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "any",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
// --- (line: 4) skipped ---
// let c: Bar<string, number>;
// let d: Bar.X;
// let e: Bar.X<string>;
// let f: Bar./*FIND ALL REFS*/[|X|].Y;

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
  // --- (line: 4) skipped ---
  // let c: Bar<string, number>;
  // let d: Bar.X;
  // let e: Bar.X<string>;
  // let f: Bar./*FIND ALL REFS*/[|X|].Y;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "type",
    "name": "",
    "displayParts": []
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
// --- (line: 4) skipped ---
// let c: Bar<string, number>;
// let d: Bar.X;
// let e: Bar.X<string>;
// let f: Bar.X./*FIND ALL REFS*/[|Y|];

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsUnresolvedSymbols3.ts ===
  // --- (line: 4) skipped ---
  // let c: Bar<string, number>;
  // let d: Bar.X;
  // let e: Bar.X<string>;
  // let f: Bar.X./*FIND ALL REFS*/[|Y|];

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "type",
    "name": "type Bar.X.Y = /*unresolved*/ any",
    "displayParts": [
     {
      "text": "type",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Bar",
      "kind": "aliasName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "X",
      "kind": "aliasName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "Y",
      "kind": "aliasName"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "=",
      "kind": "operator"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "/*unresolved*/",
      "kind": "text"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "any",
      "kind": "keyword"
     }
    ]
   }
  ]