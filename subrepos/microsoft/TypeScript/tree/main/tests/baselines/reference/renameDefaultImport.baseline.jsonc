// === findAllReferences ===
// === /tests/cases/fourslash/B.ts ===
// <|export default class /*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true, isDefinition: true |}B|] {
//     test() {
//     }
// }|>

// === /tests/cases/fourslash/A.ts ===
// <|import [|{| defId: 1, isWriteAccess: true |}B|] from "./B";|>
// let b = new [|{| defId: 1 |}B|]();
// b.test();

  // === Definitions ===
  // === /tests/cases/fourslash/B.ts ===
  // <|export default class /*FIND ALL REFS*/[|{| defId: 0 |}B|] {
  //     test() {
  //     }
  // }|>

  // === /tests/cases/fourslash/A.ts ===
  // <|import [|{| defId: 1 |}B|] from "./B";|>
  // let b = new B();
  // b.test();

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "class",
    "name": "class B",
    "displayParts": [
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "B",
      "kind": "className"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "(alias) class B\nimport B",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "B",
      "kind": "aliasName"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "B",
      "kind": "aliasName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/A.ts ===
// <|import /*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true, isDefinition: true |}B|] from "./B";|>
// let b = new [|{| defId: 0 |}B|]();
// b.test();

// === /tests/cases/fourslash/B.ts ===
// <|export default class [|{| defId: 1, isWriteAccess: true |}B|] {
//     test() {
//     }
// }|>

  // === Definitions ===
  // === /tests/cases/fourslash/A.ts ===
  // <|import /*FIND ALL REFS*/[|{| defId: 0 |}B|] from "./B";|>
  // let b = new B();
  // b.test();

  // === /tests/cases/fourslash/B.ts ===
  // <|export default class [|{| defId: 1 |}B|] {
  //     test() {
  //     }
  // }|>

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "alias",
    "name": "(alias) class B\nimport B",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "alias",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "B",
      "kind": "aliasName"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "import",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "B",
      "kind": "aliasName"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "class",
    "name": "class B",
    "displayParts": [
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "B",
      "kind": "className"
     }
    ]
   }
  ]



// === findRenameLocations ===
// === /tests/cases/fourslash/B.ts ===
// <|export default class /*RENAME*/[|BRENAME|] {
//     test() {
//     }
// }|>

// === /tests/cases/fourslash/A.ts ===
// <|import [|BRENAME|] from "./B";|>
// let b = new [|BRENAME|]();
// b.test();



// === findRenameLocations ===
// === /tests/cases/fourslash/A.ts ===
// <|import /*RENAME*/[|BRENAME|] from "./B";|>
// let b = new [|BRENAME|]();
// b.test();



// === findRenameLocations ===
// === /tests/cases/fourslash/A.ts ===
// <|import [|BRENAME|] from "./B";|>
// let b = new /*RENAME*/[|BRENAME|]();
// b.test();



// === documentHighlights ===
// === /tests/cases/fourslash/B.ts ===
// <|export default class /*HIGHLIGHTS*/[|{| kind: "writtenReference" |}B|] {
//     test() {
//     }
// }|>