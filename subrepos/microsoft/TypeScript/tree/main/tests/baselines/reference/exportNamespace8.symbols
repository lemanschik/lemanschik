//// [tests/cases/conformance/externalModules/typeOnly/exportNamespace8.ts] ////

=== /a.ts ===
export class A {}
>A : Symbol(A, Decl(a.ts, 0, 0))

export class B {}
>B : Symbol(B, Decl(a.ts, 0, 17))

=== /b.ts ===
export class B {}
>B : Symbol(B, Decl(b.ts, 0, 0))

export class C {}
>C : Symbol(C, Decl(b.ts, 0, 17))

=== /c.ts ===

export type * from "./a";
export * from "./b"; // Collision error

=== /d.ts ===
import { A, B, C } from "./c";
>A : Symbol(A, Decl(d.ts, 0, 8))
>B : Symbol(B, Decl(d.ts, 0, 11))
>C : Symbol(C, Decl(d.ts, 0, 14))

let _: A = new A();   // Error
>_ : Symbol(_, Decl(d.ts, 1, 3))
>A : Symbol(A, Decl(d.ts, 0, 8))
>A : Symbol(A, Decl(d.ts, 0, 8))

let __: B = new B();  // Ok
>__ : Symbol(__, Decl(d.ts, 2, 3))
>B : Symbol(B, Decl(d.ts, 0, 11))
>B : Symbol(B, Decl(d.ts, 0, 11))

let ___: C = new C(); // Ok
>___ : Symbol(___, Decl(d.ts, 3, 3))
>C : Symbol(C, Decl(d.ts, 0, 14))
>C : Symbol(C, Decl(d.ts, 0, 14))

