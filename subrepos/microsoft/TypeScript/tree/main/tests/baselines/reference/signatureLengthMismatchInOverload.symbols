//// [tests/cases/compiler/signatureLengthMismatchInOverload.ts] ////

=== signatureLengthMismatchInOverload.ts ===
function f(callback: (arg: string, arg2: string) => void): void;
>f : Symbol(f, Decl(signatureLengthMismatchInOverload.ts, 0, 0), Decl(signatureLengthMismatchInOverload.ts, 0, 64), Decl(signatureLengthMismatchInOverload.ts, 1, 50))
>callback : Symbol(callback, Decl(signatureLengthMismatchInOverload.ts, 0, 11))
>arg : Symbol(arg, Decl(signatureLengthMismatchInOverload.ts, 0, 22))
>arg2 : Symbol(arg2, Decl(signatureLengthMismatchInOverload.ts, 0, 34))

function f(callback: (arg: number) => void): void;
>f : Symbol(f, Decl(signatureLengthMismatchInOverload.ts, 0, 0), Decl(signatureLengthMismatchInOverload.ts, 0, 64), Decl(signatureLengthMismatchInOverload.ts, 1, 50))
>callback : Symbol(callback, Decl(signatureLengthMismatchInOverload.ts, 1, 11))
>arg : Symbol(arg, Decl(signatureLengthMismatchInOverload.ts, 1, 22))

function f(callback: unknown) { }
>f : Symbol(f, Decl(signatureLengthMismatchInOverload.ts, 0, 0), Decl(signatureLengthMismatchInOverload.ts, 0, 64), Decl(signatureLengthMismatchInOverload.ts, 1, 50))
>callback : Symbol(callback, Decl(signatureLengthMismatchInOverload.ts, 2, 11))

f((arg: number, arg2: number) => {});
>f : Symbol(f, Decl(signatureLengthMismatchInOverload.ts, 0, 0), Decl(signatureLengthMismatchInOverload.ts, 0, 64), Decl(signatureLengthMismatchInOverload.ts, 1, 50))
>arg : Symbol(arg, Decl(signatureLengthMismatchInOverload.ts, 4, 3))
>arg2 : Symbol(arg2, Decl(signatureLengthMismatchInOverload.ts, 4, 15))

