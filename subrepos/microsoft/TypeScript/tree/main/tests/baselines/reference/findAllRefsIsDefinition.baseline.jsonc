// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsIsDefinition.ts ===
// <|declare function [|{| isWriteAccess: true, isDefinition: true |}foo|](a: number): number;|>
// <|declare function [|{| isWriteAccess: true, isDefinition: true |}foo|](a: string): string;|>
// <|declare function [|{| isWriteAccess: true, isDefinition: true |}foo|]/*FIND ALL REFS*/(a: string | number): string | number;|>
// 
// function foon(a: number): number;
// function foon(a: string): string;
// function foon(a: string | number): string | number {
//     return a
// }
// 
// [|foo|]; foon;
// 
// export const bar = 123;
// console.log({ bar });
// --- (line: 15) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsIsDefinition.ts ===
  // <|declare function [|foo|](a: number): number;|>
  // declare function foo(a: string): string;
  // declare function foo/*FIND ALL REFS*/(a: string | number): string | number;
  // 
  // function foon(a: number): number;
  // function foon(a: string): string;
  // --- (line: 7) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "function",
    "name": "function foo(a: number): number (+2 overloads)",
    "displayParts": [
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "foo",
      "kind": "functionName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "a",
      "kind": "parameterName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "+",
      "kind": "operator"
     },
     {
      "text": "2",
      "kind": "numericLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "overloads",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsIsDefinition.ts ===
// declare function foo(a: number): number;
// declare function foo(a: string): string;
// declare function foo(a: string | number): string | number;
// 
// <|function [|{| isDefinition: true |}foon|](a: number): number;|>
// <|function [|{| isDefinition: true |}foon|](a: string): string;|>
// <|function [|{| isWriteAccess: true, isDefinition: true |}foon|]/*FIND ALL REFS*/(a: string | number): string | number {
//     return a
// }|>
// 
// foo; [|foon|];
// 
// export const bar = 123;
// console.log({ bar });
// --- (line: 15) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsIsDefinition.ts ===
  // declare function foo(a: number): number;
  // declare function foo(a: string): string;
  // declare function foo(a: string | number): string | number;
  // 
  // <|function [|foon|](a: number): number;|>
  // function foon(a: string): string;
  // function foon/*FIND ALL REFS*/(a: string | number): string | number {
  //     return a
  // }
  // 
  // --- (line: 11) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "function",
    "name": "function foon(a: number): number (+1 overload)",
    "displayParts": [
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "foon",
      "kind": "functionName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "a",
      "kind": "parameterName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "+",
      "kind": "operator"
     },
     {
      "text": "1",
      "kind": "numericLiteral"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "overload",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsIsDefinition.ts ===
// --- (line: 9) skipped ---
// 
// foo; foon;
// 
// <|export const [|{| isWriteAccess: true, isDefinition: true |}bar|]/*FIND ALL REFS*/ = 123;|>
// console.log({ [|{| isWriteAccess: true |}bar|] });
// 
// interface IFoo {
//     foo(): void;
// --- (line: 18) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsIsDefinition.ts ===
  // --- (line: 9) skipped ---
  // 
  // foo; foon;
  // 
  // <|export const [|bar|]/*FIND ALL REFS*/ = 123;|>
  // console.log({ bar });
  // 
  // interface IFoo {
  // --- (line: 17) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "const",
    "name": "const bar: 123",
    "displayParts": [
     {
      "text": "const",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "bar",
      "kind": "localName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "123",
      "kind": "stringLiteral"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsIsDefinition.ts ===
// --- (line: 13) skipped ---
// console.log({ bar });
// 
// interface IFoo {
//     <|[|{| defId: 0, isDefinition: true |}foo|]/*FIND ALL REFS*/(): void;|>
// }
// class Foo implements IFoo {
//     constructor(n: number)
//     constructor()
//     constructor(n: number?) { }
//     <|[|{| defId: 1, isWriteAccess: true |}foo|](): void { }|>
//     static init() { return new this() }
// }

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsIsDefinition.ts ===
  // --- (line: 13) skipped ---
  // console.log({ bar });
  // 
  // interface IFoo {
  //     <|[|{| defId: 0 |}foo|]/*FIND ALL REFS*/(): void;|>
  // }
  // class Foo implements IFoo {
  //     constructor(n: number)
  //     constructor()
  //     constructor(n: number?) { }
  //     <|[|{| defId: 1 |}foo|](): void { }|>
  //     static init() { return new this() }
  // }

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "method",
    "name": "(method) IFoo.foo(): void",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "method",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "IFoo",
      "kind": "interfaceName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "foo",
      "kind": "methodName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "void",
      "kind": "keyword"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "method",
    "name": "(method) Foo.foo(): void",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "method",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Foo",
      "kind": "className"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "foo",
      "kind": "methodName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "void",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsIsDefinition.ts ===
// --- (line: 16) skipped ---
//     foo(): void;
// }
// class Foo implements IFoo {
//     <|[|{| isDefinition: true |}constructor|](n: number)|>
//     <|[|{| isDefinition: true |}constructor|]()|>
//     /*FIND ALL REFS*/<|[|{| isDefinition: true |}constructor|](n: number?) { }|>
//     foo(): void { }
//     static init() { return new [|this|]() }
// }

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsIsDefinition.ts ===
  // --- (line: 15) skipped ---
  // interface IFoo {
  //     foo(): void;
  // }
  // <|class [|Foo|] implements IFoo {
  //     constructor(n: number)
  //     constructor()
  //     /*FIND ALL REFS*/constructor(n: number?) { }
  //     foo(): void { }
  //     static init() { return new this() }
  // }|>

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "class",
    "name": "class Foo",
    "displayParts": [
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Foo",
      "kind": "className"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/findAllRefsIsDefinition.ts ===
// --- (line: 13) skipped ---
// console.log({ bar });
// 
// interface IFoo {
//     <|[|{| defId: 0 |}foo|](): void;|>
// }
// class Foo implements IFoo {
//     constructor(n: number)
//     constructor()
//     constructor(n: number?) { }
//     <|[|{| defId: 1, isWriteAccess: true, isDefinition: true |}foo|]/*FIND ALL REFS*/(): void { }|>
//     static init() { return new this() }
// }

  // === Definitions ===
  // === /tests/cases/fourslash/findAllRefsIsDefinition.ts ===
  // --- (line: 13) skipped ---
  // console.log({ bar });
  // 
  // interface IFoo {
  //     <|[|{| defId: 0 |}foo|](): void;|>
  // }
  // class Foo implements IFoo {
  //     constructor(n: number)
  //     constructor()
  //     constructor(n: number?) { }
  //     <|[|{| defId: 1 |}foo|]/*FIND ALL REFS*/(): void { }|>
  //     static init() { return new this() }
  // }

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "method",
    "name": "(method) IFoo.foo(): void",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "method",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "IFoo",
      "kind": "interfaceName"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "foo",
      "kind": "methodName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "void",
      "kind": "keyword"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "method",
    "name": "(method) Foo.foo(): void",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "method",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Foo",
      "kind": "className"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "foo",
      "kind": "methodName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "void",
      "kind": "keyword"
     }
    ]
   }
  ]